/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	function log(error) {
		(typeof console !== "undefined")
		&& (console.error || console.log)("[Script Loader]", error);
	}

	// Check for IE =< 8
	function isIE() {
		return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
	}

	try {
		if (typeof execScript !== "undefined" && isIE()) {
			execScript(src);
		} else if (typeof eval !== "undefined") {
			eval.call(null, src);
		} else {
			log("EvalError: No eval function available");
		}
	} catch (error) {
		log(error);
	}
}


/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var script_loader_sourceMap_true_src_common_main_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var script_loader_sourceMap_true_src_common_main_util_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(script_loader_sourceMap_true_src_common_main_util_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _src_common_main_add_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _src_common_main_add_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_src_common_main_add_css__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var script_loader_sourceMap_true_src_common_quiz_quiz_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var script_loader_sourceMap_true_src_common_quiz_quiz_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(script_loader_sourceMap_true_src_common_quiz_quiz_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _src_common_quiz_quiz_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _src_common_quiz_quiz_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_src_common_quiz_quiz_css__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var script_loader_sourceMap_true_src_common_tipkovnice_keyboard_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);
/* harmony import */ var script_loader_sourceMap_true_src_common_tipkovnice_keyboard_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(script_loader_sourceMap_true_src_common_tipkovnice_keyboard_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _src_common_tipkovnice_keyboard_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(13);
/* harmony import */ var _src_common_tipkovnice_keyboard_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_src_common_tipkovnice_keyboard_css__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var script_loader_sourceMap_true_src_common_memory_memory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var script_loader_sourceMap_true_src_common_memory_memory_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(script_loader_sourceMap_true_src_common_memory_memory_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _src_common_memory_memory_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(16);
/* harmony import */ var _src_common_memory_memory_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_src_common_memory_memory_css__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var script_loader_sourceMap_true_src_common_main_comm_commClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(17);
/* harmony import */ var script_loader_sourceMap_true_src_common_main_comm_commClient_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(script_loader_sourceMap_true_src_common_main_comm_commClient_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var script_loader_sourceMap_true_src_common_main_comm_ivrComm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(19);
/* harmony import */ var script_loader_sourceMap_true_src_common_main_comm_ivrComm_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(script_loader_sourceMap_true_src_common_main_comm_ivrComm_js__WEBPACK_IMPORTED_MODULE_9__);

/*
 *
 * Main files always (required) included in any DOS bundle
 *
 */


// -------------------------- //
// ---------- util ---------- //
// -------------------------- //





// TODO: manually import images used outside this project
//import '@src/common/main/img/1.jpg';


// -------------------------- //
// ---------- quiz ---------- //
// -------------------------- //





// -------------------------------- //
// ---------- tipkovnice ---------- //
// -------------------------------- //





// ---------------------------- //
// ---------- memory ---------- //
// ---------------------------- //




// --------------------------------------------------- //
// ---------- content object communication ----------- //
// --------------------------------------------------- //





// -------------------- examples

/* -- import everything in folder
function requireAll(r) { r.keys().forEach(r); }
requireAll(require.context('@src/main/img/', true, /\.jpg$/));
*/

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0)(__webpack_require__(6))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = "$(document).ready(function () {\n\n    if (window.location.href.indexOf(\"https://dos-alat-test.sedamcloud.com/api/creator?derId=684&derName=obavijesti\") > -1) {\n        $(\".dos-header-title\").css(\"visibility\", \"hidden\");\n        $(\".dos-main-information__nav\").css(\"visibility\", \"hidden\");\n    }\n\n    /*$('.dos-btn-solution').on('click', function (event) {\n        $(this).closest('.dos-part-question').find('.question-help').slideToggle(400);\n    });*/\n\n\n    var focusedVid;\n    var allvids = $('video');\n\n    var focusedAudio;\n    var allAudio = $('audio');\n\n    pauseMultimedia = (multimediaList, currentPlayingIndex) => {\n        // pause multimedia, except current if exists\n        for (var i = 0; i < multimediaList.length; i++) {\n            if (currentPlayingIndex == null || i !== currentPlayingIndex) {\n                multimediaList[i].pause();\n            }\n        }\n    };\n\n    /** play only one video at a time **/\n    $(\"video\").on(\"play\", function (event) {\n        focusedVid = event.target;\n        var currentVideoIndex = allvids.index(this);\n\n        pauseMultimedia(allvids, currentVideoIndex);\n        pauseMultimedia(allAudio);\n    });\n\n    /** play only one audio at a time **/\n    $(\"audio\").on(\"play\", function (event) {\n        focusedAudio = event.target;\n        var currentAudioIndex = allAudio.index(this);\n\n        pauseMultimedia(allAudio, currentAudioIndex);\n        pauseMultimedia(allvids);\n    });\n\n    $(\"video\").on(\"click\", function (e) {\n        this.play();\n    });\n\n    $(\"audio\").on(\"click\", function (e) {\n        this.play();\n    });\n\n    //pause multimedia on slide change\n    $('.dos-collection-tasks-slider').on('beforeChange', function (slick, currentSlide, nextSlide) {\n        const multimediaElements = $(slick.currentTarget).find(\"audio, video\");\n        pauseMultimedia(multimediaElements);\n    });\n\n\n    $(document.body).bind(\"keydown\", function (e) {\n        if (e.keyCode === 27) {\n            /* close fancybox on esc */\n            var $target = $(\".iframe-btn.zoomed\");\n\n            if ($target) {\n                $target.next().toggleClass(\"iframe-zoom\");\n                $target.toggleClass(\"zoomed\");\n                $target.before('<div class=\"iframe-overlay\"></div>');\n                if ($target.hasClass(\"zoomed\")) {\n                    $target.before('<div class=\"iframe-overlay\"></div>');\n                } else {\n                    $(\".iframe-overlay\").remove();\n                }\n            }\n        }\n\n        if (e.keyCode === 32) {\n            if (navigator.userAgent.indexOf(\"Chrome\") !== -1) {\n                /**\n                  * console.error(\"we in chrome!\");\n                * e.preventDefault();\n                  */\n                if (focusedVid && focusedVid.paused === true) {\n                    focusedVid.pause();\n                    e.preventDefault();\n                } else {\n                    if (focusedVid) {\n                        focusedVid.play();\n                        e.preventDefault();\n                    }\n                }\n            }\n        }\n    });\n\n    $(\"input\").focus(function () {\n        focusedVid = \"\";\n        focusedAudio = \"\";\n    });\n\n\n    /* Quiz handlers start */\n    $(\".take-test .btn\").click(function () {\n\n        $(\"#knowledge-assessment\").toggle(\"fast\", function () {\n            /* console.log(\"completed toggle\"); */\n            $(\"#knowledge-assessment\").find('div[data-question-type=\"Povla??enje rije??i\"]').each(function () {\n                adjustDropzoneDimensions($(this).attr('id'));\n            });\n        });\n        $(\"section.take-test\").toggleClass(\"opened\");\n    });\n\n    $(\"button#finish-test\").click(function () {\n        $(\"#unit-test-finished\").show(\"fast\");\n    });\n\n    if (typeof WebVttHelper === \"function\") {\n        (new WebVttHelper).generateVTTCues();\n    }\n\n    $(\".pill\").watch({\n        /* specify CSS styles or attribute names to monitor */\n        properties: \"attr_data-dragged-group-value\",\n\n        /* callback function when a change is detected */\n        callback: function (data, i) {\n            // $(this).siblings('.pill[data-dragged-group-value=\"-1\"]').hide();\n            // $(this).siblings('.pill[data-dragged-group-value=\"-1\"]:first').css('display', 'inline-block');\n            $(this).siblings('.pill[data-dragged-group-value=\"-1\"]:first').css('position', 'absolute');\n        }\n    });\n\n    /* Quiz handlers stop */\n\n\n    /**\n     * Adds appropriate classes to text and numeric inputs, so that they can be sized appropriately\n     * for example, if the longest possible answer is \"red\", the input field is smaller if the longest possible is \"otorinolaringologija\"\n     */\n    function addClassesToTextInputs() {\n\n        var inputs = $(\"input[type='text'][data-correct-data]\");\n\n        function addClass(classname, element) {\n            element.className += classname;\n        }\n\n        /* console.log(inputs.length); */\n        for (var i = 0; i < inputs.length; i++) {\n\n\n            /**\n             * Data-correct-data can have multiple options, we need to parse them\n             * we assume that ; is never a correct answer\n             */\n\n            var correctanswers = inputs[i].getAttribute(\"data-correct-data\").split(\";\");\n            var longestCorrectAnswer = 0;\n            for (var j = 0; j < correctanswers.length; j++) {\n                /* console.log(j + \". correct answer is \" + correctanswers[j] + \"and its length is \" + correctanswers[j].length); */\n                if (correctanswers[j].length > longestCorrectAnswer) {\n                    longestCorrectAnswer = correctanswers[j].length;\n                }\n            }\n            /* console.log(\"longest correct is \" + longestCorrectAnswer); */\n            if (longestCorrectAnswer <= 3) {\n                addClass(\"length-tiny\", inputs[i]);\n            }\n            else if (longestCorrectAnswer <= 6) {\n                addClass(\"length-small\", inputs[i]);\n                /* console.log (\"you should be small\"); */\n            }\n            else if (longestCorrectAnswer <= 10) {\n                addClass(\"length-medium\", inputs[i]);\n                /* console.log(\"you should be medium\"); */\n            }\n            else if (longestCorrectAnswer <= 15) {\n                addClass(\"length-long\", inputs[i]);\n                /* console.log(\"you should be long\"); */\n            }\n            else {\n                addClass(\"length-verylong\", inputs[i]);\n                /* console.log (\"you are very long\"); */\n            }\n\n\n        }\n    }\n\n    function addClassesToNumberInputs() {\n\n        /* all have data-minvalue */\n        var inputs = $(\"input[type='number'][data-minvalue]\");\n\n        function addClass(classname, element) {\n            element.className += classname;\n        }\n\n        /* console.log(inputs.length); */\n        for (var i = 0; i < inputs.length; i++) {\n\n\n            /**\n             * Data-correct-data can have multiple options, we need to parse them\n             * we assume that ; is never a correct answer\n             */\n\n            var correctMinValue = inputs[i].getAttribute(\"data-minvalue\");\n            var correctMaxValue = inputs[i].getAttribute(\"data-maxvalue\");\n            var longestCorrectAnswer = 0;\n\n            correctMinValue = correctMinValue.toString();\n            correctMaxValue = correctMaxValue.toString();\n            if (correctMinValue.length > correctMaxValue.length) {\n                longestCorrectAnswer = correctMinValue.length;\n            }\n            else if (correctMaxValue.length > correctMinValue.length) {\n                longestCorrectAnswer = correctMaxValue.length;\n            }\n            else {\n                longestCorrectAnswer = correctMaxValue.length;\n            }\n\n            /* console.log(\"longest correct is \" + longestCorrectAnswer); */\n            if (longestCorrectAnswer <= 3) {\n                addClass(\"length-tiny\", inputs[i]);\n            }\n            else if (longestCorrectAnswer <= 6) {\n                addClass(\"length-small\", inputs[i]);\n                /* console.log (\"you should be small\"); */\n            }\n            else if (longestCorrectAnswer <= 10) {\n                addClass(\"length-medium\", inputs[i]);\n                /* console.log(\"you should be medium\"); */\n            }\n            else if (longestCorrectAnswer <= 15) {\n                addClass(\"length-long\", inputs[i]);\n                /* console.log(\"you should be long\"); */\n            }\n            else {\n                addClass(\"length-verylong\", inputs[i]);\n                /* console.log (\"you are very long\"); */\n            }\n\n\n        }\n    }\n    /**\n     * Numeric inputs are inputs of type text whose input is restricted to numbers and other math characters\n     * input type number returns empty string when '.' or ',' is used, depending on browser settings, so\n     * we a custom, 'numeric' input is used\n     */\n\n    function addClassesToNumericInputs() {\n\n        /* all have data-minvalue */\n        var inputs = $(\"input[type='text'][data-minvalue]\");\n\n        function addClass(classname, element) {\n            element.className += classname;\n        }\n\n        /* console.log(inputs.length); */\n        for (var i = 0; i < inputs.length; i++) {\n\n\n            /**\n             * Data-correct-data can have multiple options, we need to parse them\n             * we assume that ; is never a correct answer\n             */\n\n            var correctMinValue = inputs[i].getAttribute(\"data-minvalue\");\n            var correctMaxValue = inputs[i].getAttribute(\"data-maxvalue\");\n            var longestCorrectAnswer = 0;\n\n            correctMinValue = correctMinValue.toString();\n            correctMaxValue = correctMaxValue.toString();\n            if (correctMinValue.length > correctMaxValue.length) {\n                longestCorrectAnswer = correctMinValue.length;\n            }\n            else if (correctMaxValue.length > correctMinValue.length) {\n                longestCorrectAnswer = correctMaxValue.length;\n            }\n            else {\n                longestCorrectAnswer = correctMaxValue.length;\n            }\n\n            /* console.log(\"longest correct is \" + longestCorrectAnswer); */\n            if (longestCorrectAnswer <= 3) {\n                addClass(\"length-tiny\", inputs[i]);\n            }\n            else if (longestCorrectAnswer <= 6) {\n                addClass(\"length-small\", inputs[i]);\n                /* console.log (\"you should be small\"); */\n            }\n            else if (longestCorrectAnswer <= 10) {\n                addClass(\"length-medium\", inputs[i]);\n                /* console.log(\"you should be medium\"); */\n            }\n            else if (longestCorrectAnswer <= 15) {\n                addClass(\"length-long\", inputs[i]);\n                /* console.log(\"you should be long\"); */\n            }\n            else {\n                addClass(\"length-verylong\", inputs[i]);\n                /* console.log (\"you are very long\"); */\n            }\n\n\n        }\n    }\n\n    /*addClassesToTextInputs();\n    addClassesToNumberInputs();\n    addClassesToNumericInputs();\n    */\n\n    /* select the target node */\n    var target = document.getElementsByTagName(\"title\");\n    var originalTitle = document.title;\n\n    function changeTitle() {\n        document.title = originalTitle;\n    }\n\n    /* create an observer instance */\n    var observer = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mutation) {\n            if (document.title !== originalTitle) {\n                changeTitle();\n            }\n            /* Treat the mutation here. Use mutation.type to see what happened. */\n        });\n    });\n\n    /* configuration of the observer: */\n    var config = { attributes: true, childList: true, characterData: true };\n\n    /* pass in the target node, as well as the observer options */\n    observer.observe(target[0], config);\n\n\n\n    var renderMath = function () {\n        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub]);\n    };\n\n    var isMathRendered = false;\n\n    $('math').click(function () {\n        if (!isMathRendered) {\n            renderMath();\n            isMathRendered = true;\n        }\n    });\n\n    $('body .btn-audio-alternative').on('click', function () {\n        $(this).closest('.audio-alternative-container').find('.btn-audio-alternative-toggle').slideToggle();\n    });\n\n    setTimeout(function () { window.dispatchEvent(new Event('resize')); }, 3000);\n\n    // attach scroll client to each IVR interaction\n    $('.interaction-resize-container iframe').each((idx, interactionEl) => {\n        new ScrollVisibleIvrContentCommClient(interactionEl.id);\n    })\n})\n"

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0)(__webpack_require__(9))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = "/**\n *enableBloat is a variable that enables or disables unnecessary features.\n *If you wish to disable them, simply change enableBloat to false.\n *\n *The features as of now affected:\n *\n * - Forbidding drops outside dropzones in drag and drop quizzes\n */\nconst questionTypes = {\n\ttruefalse: \"Da/Ne\",\n\tpair: \"Jedan točan odgovor\",\n\tmulti: \"Višestruki odabir\",\n\tmatching: \"Uparivanje odgovora\",\n\twordInsert: \"Upisivanje riječi\",\n\tinsertWordToElement: \"Upisivanje u elemente\",\n\twordSelect: \"Odabiranje riječi\",\n\tdragElements: \"Povlačenje riječi\",\n\tdragPairs: \"Povlačenje parova\",\n\tdragSortElements: \"Razvrstavanje elemenata\",\n\tdragOrderElements: \"Uređivanje poretka elemenata\",\n\tnumericValue: \"Numerički\",\n\tdragOnPicture: \"Povlačenje na sliku\",\n\trepl: \"REPL zadatak\"\n};\n\nvar enableBloat = true;\n\nconst UPITNIKHINTPATH = \"../img/informatika/upitnik-hint.svg\";\n//for internet explorer\nif (!String.prototype.includes) {\n\tString.prototype.includes = function (search, start) {\n\t\tif (typeof start !== 'number') {\n\t\t\tstart = 0;\n\t\t}\n\n\t\tif (start + search.length > this.length) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.indexOf(search, start) !== -1;\n\t\t}\n\t};\n}\n\nvar winAudio; //= new Audio('../audio/Tocno.mp3');\nvar loseAudio; //= new Audio('../audio/Krivo.mp3');\n\n// ---------- initialize \"drag elements\" question elements\n\nfunction initDragElementsElements(questionId) {\n\tvar questionContextElement = questionId && document.getElementById(questionId) || document;\n\n\tvar taskId;\n\n\t$('.dropzone, .dropzone-holder', questionContextElement)\n\t\t.droppable({\n\n\t\t\taccept: '.draggable.dos-answer-draggable',\n\t\t\trevert: 'invalid',\n\t\t\t// TODO: custom overlapping\n\t\t\ttolerance: 'intersect',\n\n\t\t\t// listen for drop related events:\n\n\t\t\tactivate: function (event) {\n\t\t\t\t// add active dropzone feedback\n\t\t\t\tevent.target.classList.add('drop-active');\n\t\t\t},\n\t\t\tover: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// feedback the possibility of a drop\n\t\t\t\tdropzoneElement.classList.add('drop-target');\n\t\t\t\tdropzoneElement.classList.add('border-transparent');\n\n\t\t\t\tdraggableElement.classList.add('can-drop-style');\n\t\t\t\tdraggableElement.classList.add('can-drop');\n\t\t\t\tdropzoneElement.classList.add('hidetext');\n\t\t\t\tif (!(Number(dropzoneElement.getAttribute(\"visits\")) > 0)) {\n\t\t\t\t\t//if attribute visits is not set or 0, check in the element\n\t\t\t\t\tdropzoneElement.setAttribute(\"visits\", Number(1));\n\t\t\t\t\tdropzoneElement.setAttribute(\"visitedByDataGroup\" + draggableElement.getAttribute(\"data-group\"), \"visited\");\n\n\t\t\t\t} else {\n\t\t\t\t\t//element has already been visited, so check if the visit is new\n\t\t\t\t\tif (dropzoneElement.getAttribute(\"visitedByDataGroup\" + draggableElement.getAttribute(\"data-group\")) == \"visited\") {\n\t\t\t\t\t\t//The visit is not new\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//The visit is new, check in and increment num of visits\n\t\t\t\t\t\tdropzoneElement.setAttribute(\"visitedByDataGroup\" + draggableElement.getAttribute(\"data-group\"), \"visited\");\n\t\t\t\t\t\tdropzoneElement.setAttribute(\"visits\", Number(Number(dropzoneElement.getAttribute(\"visits\")) + 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdropzoneElement.setAttribute(\"data-dragged-group-value\", event.target.getAttribute(\"id\").split('a')[1]);\n\t\t\t},\n\t\t\tout: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// remove the drop feedback style\n\t\t\t\tdropzoneElement.classList.remove('drop-target');\n\t\t\t\tdropzoneElement.classList.remove('border-transparent2');\n\n\t\t\t\tdraggableElement.classList.remove('can-drop-style');\n\t\t\t\tdraggableElement.classList.remove('draggable-active');\n\t\t\t\tdraggableElement.classList.remove('can-drop');\n\t\t\t\tdraggableElement.classList.remove('element-correct');\n\t\t\t\tdraggableElement.classList.remove('element-notcorrect');\n\t\t\t\tdropzoneElement.classList.remove('over');\n\n\t\t\t\tdropzoneElement = draggableElement;\n\t\t\t\tdraggableElement = dropzoneElement;\n\t\t\t\t//Check if the element was already checked in. If yes, decrement the visits and check out\n\n\t\t\t\tprevDropzone = event.target.getAttribute(\"id\");\n\n\t\t\t\tif (dropzoneElement.getAttribute(\"visitedByDataGroup\" + draggableElement.getAttribute(\"data-group\")) == \"visited\") {\n\t\t\t\t\t//The element is checked in, check it out\n\t\t\t\t\tdropzoneElement.setAttribute(\"visitedByDataGroup\" + draggableElement.getAttribute(\"data-group\"), \"checked-out\");\n\t\t\t\t\t//decrement number of visitors\n\t\t\t\t\tdropzoneElement.setAttribute(\"visits\", Number(Number(dropzoneElement.getAttribute(\"visits\")) - 1));\n\t\t\t\t}\n\n\t\t\t\t//If no elements are checked in, remove hidetext\n\t\t\t\t// if (Number(dropzoneElement.getAttribute(\"visits\")) < 1) {\n\t\t\t\t// \tdraggableElement.classList.remove(\"hidetext\");\n\t\t\t\t// }\n\n\t\t\t\t// dropzoneElement.setAttribute(\"data-dragged-group-value\", \"-1\");\n\t\t\t},\n\t\t\tdrop: (event, ui) => {\n\t\t\t\tvar draggableElement = ui.draggable.get(0);\n\t\t\t\tdragDropAction(event.target, taskId, draggableElement);\n\t\t\t},\n\t\t\tdeactivate: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// remove active dropzone feedback\n\t\t\t\tdropzoneElement.classList.remove('drop-active');\n\t\t\t\tdropzoneElement.classList.remove('drop-target');\n\t\t\t\tdropzoneElement.classList.remove('over');\n\t\t\t\tdraggableElement.classList.remove('can-drop');\n\t\t\t\tdropzoneElement.classList.add('border-none');\n\t\t\t}\n\t\t});\n\n\t// target elements with the \"draggable\" class\n\t$('.draggable.dos-answer-draggable', questionContextElement)\n\t\t.draggable({\n\t\t\trevert: 'invalid',\n\t\t\t// TODO: custom overlapping\n\t\t\ttolerance: 'intersect',\n\t\t\tdistance: 7,\n\n\t\t\t// call this function on every dragend event\n\t\t\tstart: function (event) {\n\t\t\t\tvar draggableElement = event.target;\n\n\t\t\t\tif (!$(draggableElement).parent().hasClass('dos-answer-wrapper')) {\n\t\t\t\t\t$(draggableElement).parent().addClass('dos-dropzone-while-element-dragging-style');\n\t\t\t\t}\n\n\t\t\t\t// $('.dos-answer-wrapper').css({ overflow: '' });\n\n\t\t\t\tdraggableElement.style.zIndex = '10';\n\n\t\t\t\ttaskId = `${$(draggableElement).closest('div[id*=\"_questionId_\"]').attr('id')}`;\n\n\t\t\t\tDragCounter.onDragStart(draggableElement);\n\n\t\t\t\tdraggableElement.classList.remove('success');\n\t\t\t\tdraggableElement.classList.remove('danger');\n\n\t\t\t\t// mark element as being active\n\t\t\t\tdraggableElement.classList.add('draggable-active');\n\n\t\t\t\t//to paint them orange!\n\t\t\t\tif (draggableElement.classList.contains('dd-solution')) {\n\t\t\t\t\tdraggableElement.classList.add('can-drop');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tstop: function (event) {\n\t\t\t\tvar draggableElement = event.target;\n\n\t\t\t\t$('.dos-dropzone-while-element-dragging-style').removeClass('dos-dropzone-while-element-dragging-style');\n\n\t\t\t\t$('.dos-answer-wrapper').css({ overflow: 'visible' });\n\n\t\t\t\t//to remove the orange paint\n\t\t\t\tif (draggableElement.classList.contains('can-drop')) {\n\t\t\t\t\tdraggableElement.classList.remove('can-drop');\n\t\t\t\t}\n\n\t\t\t\t// unmark active element\n\t\t\t\tdraggableElement.classList.remove('draggable-active');\n\t\t\t\tdraggableElement.classList.remove('can-drop-style');\n\n\t\t\t\tDragCounter.onDragEnd(draggableElement);\n\t\t\t}\n\t\t})\n\t\t// containment - we are targeting element's ancestor, not unique element\n\t\t.each(function () {\n\t\t\t$(this).draggable({\n\t\t\t\tcontainment: $(this).closest('.question')\n\t\t\t});\n\t\t});\n}\n\n// ---------- initialize \"drag on picture\" question elements\n\nfunction initDragOnPictureElements(questionId) {\n\tvar questionContextElement = questionId && document.getElementById(questionId) || document;\n\n\t$('.draggable-restricted', questionContextElement)\n\t\t.each(function () {\n\t\t\tinitDragOnPictureAnswerElement(this);\n\t\t\tinitDragOnPictureAnswerElementByClick(this);\n\t\t});\n\n\t$(\".picture-dropzone-creator\", questionContextElement)\n\t\t.droppable({\n\t\t\t// only accept elements matching this CSS selector\n\t\t\taccept: '.draggable-restricted',\n\t\t\t// TODO: custom overlapping\n\t\t\ttolerance: 'intersect',\n\n\t\t\tactivate: function (event) {\n\t\t\t\t// add active dropzone feedback\n\t\t\t\tevent.target.classList.add('drop-active');\n\t\t\t},\n\t\t\tover: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// feedback the possibility of a drop\n\t\t\t\tdropzoneElement.classList.add('drop-target');\n\t\t\t\tdraggableElement.classList.add('can-drop');\n\n\t\t\t},\n\t\t\tout: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// remove the drop feedback style\n\t\t\t\tdropzoneElement.classList.remove('drop-target');\n\t\t\t\tdraggableElement.classList.remove('can-drop');\n\t\t\t\tdraggableElement.classList.remove('element-correct');\n\t\t\t\tdraggableElement.classList.remove('element-notcorrect');\n\n\t\t\t\tdraggableElement.setAttribute('data-percentage-x', \"-1\");\n\t\t\t\tdraggableElement.setAttribute('data-percentage-y', \"-1\");\n\t\t\t},\n\t\t\tdrop: function (event, ui) {\n\t\t\t\tfunction findPositionPercentage(start, end, position) {\n\t\t\t\t\treturn (1. * position - start) / (end * 1. - start);\n\t\t\t\t}\n\n\t\t\t\tfunction checkPercentage(percentage) {\n\t\t\t\t\tif (percentage < 0) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} else if (percentage > 1) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn percentage;\n\t\t\t\t}\n\n\t\t\t\tvar draggableElement = ui.draggable.get(0);\n\t\t\t\tvar dropzoneElement = event.target;\n\t\t\t\t//with rect.top or rect.left you can get coordinates\n\t\t\t\tvar dragRect = draggableElement.getBoundingClientRect();\n\t\t\t\tvar dropRect = dropzoneElement.getBoundingClientRect();\n\t\t\t\tvar centerDragX = (dragRect.right + dragRect.left) / 2.0;\n\t\t\t\tvar centerDragY = (dragRect.top + dragRect.bottom) / 2.0;\n\t\t\t\tvar percentageX = checkPercentage(findPositionPercentage(dropRect.left, dropRect.right, centerDragX));\n\t\t\t\tvar percentageY = checkPercentage(findPositionPercentage(dropRect.top, dropRect.bottom, centerDragY));\n\n\t\t\t\tdraggableElement.setAttribute('data-percentage-x', percentageX);\n\t\t\t\tdraggableElement.setAttribute('data-percentage-y', percentageY);\n\t\t\t\tvar answerNum = draggableElement.getAttribute('data-answer-number');\n\t\t\t\tvar questionNum = draggableElement.id.split(\"q\")[1].split(\"a\")[0];\n\t\t\t\tif (!questionNum) {\n\t\t\t\t\tquestionNum = 0;\n\t\t\t\t}\n\t\t\t\tvar answerNum = draggableElement.id.split(\"a\")[1];\n\t\t\t\tangular.element(document.getElementById('QuizModal')).scope().setPercentages(percentageX, percentageY, questionNum, answerNum);\n\t\t\t},\n\t\t\tdeactivate: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// remove active dropzone feedback\n\t\t\t\tdropzoneElement.classList.remove('drop-active');\n\t\t\t\tdropzoneElement.classList.remove('drop-target');\n\t\t\t\tdraggableElement.classList.remove('can-drop');\n\t\t\t}\n\t\t});\n\n\n\t$('.picture-dropzone-quiz', questionContextElement)\n\t\t.droppable({\n\t\t\t// only accept elements matching this CSS selector\n\t\t\taccept: '.draggable-restricted',\n\t\t\t// TODO: custom overlapping\n\t\t\ttolerance: 'intersect',\n\n\t\t\t// listen for drop related events:\n\n\t\t\tondropactivate: function (event) {\n\t\t\t\tvar dropzoneElement = event.target;\n\t\t\t\tvar containerElement = $(dropzoneElement).parents(\".draggable-area\").get(0);\n\n\t\t\t\t// add active dropzone feedback\n\t\t\t\tdropzoneElement.classList.add('drop-active');\n\n\n\t\t\t\tif (!dropzoneElement.classList.contains(\"draggable-initialized\")) {\n\t\t\t\t\tdropzoneElement.classList.add(\"draggable-initialized\");\n\n\t\t\t\t\tfunction recalculatePositions() {\n\t\t\t\t\t\tvar dropRect = dropzoneElement.getBoundingClientRect();\n\n\t\t\t\t\t\t$(\".draggable-restricted\", containerElement)\n\t\t\t\t\t\t\t.each(function (idx, draggableElement) {\n\t\t\t\t\t\t\t\t// skip repositioning if element is currently active\n\t\t\t\t\t\t\t\tif (draggableElement.classList.contains(\"draggable-active\")) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// get positioned draggables' positions\n\t\t\t\t\t\t\t\tvar quizPercentageXValue = parseFloat(draggableElement.getAttribute(\"data-quiz-percentage-x\") || -1);\n\t\t\t\t\t\t\t\tvar quizPercentageYValue = parseFloat(draggableElement.getAttribute(\"data-quiz-percentage-y\") || -1);\n\t\t\t\t\t\t\t\tvar quizWidth = parseFloat(draggableElement.getAttribute(\"data-quiz-width\") || -1);\n\t\t\t\t\t\t\t\tvar quizHeight = parseFloat(draggableElement.getAttribute(\"data-quiz-height\") || -1);\n\n\t\t\t\t\t\t\t\t// set position only if el has already been positioned\n\t\t\t\t\t\t\t\tif (quizPercentageXValue >= 0 && quizPercentageXValue >= 0) {\n\t\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t\t * Draggables are positioned relatively to starting position. In order to reposition them properly after\n\t\t\t\t\t\t\t\t\t * resize, we have to reset their positioning to get new starting points and then calculate new postions\n\t\t\t\t\t\t\t\t\t * relatively to them.\n\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\tdraggableElement.style.transform = \"\";\n\n\t\t\t\t\t\t\t\t\t// draggable rectangle\n\t\t\t\t\t\t\t\t\tvar dragRect = draggableElement.getBoundingClientRect();\n\n\n\t\t\t\t\t\t\t\t\t// ----- calculate X\n\t\t\t\t\t\t\t\t\tvar quizPercentageX = parseFloat(quizPercentageXValue);\n\t\t\t\t\t\t\t\t\t// percentages are calculated according to draggable's center point, so we have to reverse that calculation to get new absolute position\n\t\t\t\t\t\t\t\t\tvar newAbsoluteLeft = dropRect.left + dropRect.width * quizPercentageX - (quizWidth) / 2;\n\t\t\t\t\t\t\t\t\t// new relative position\n\t\t\t\t\t\t\t\t\tvar newLeft = newAbsoluteLeft - dragRect.left;\n\t\t\t\t\t\t\t\t\t// set new horizontal position\n\t\t\t\t\t\t\t\t\t//draggableElement.style.left = newLeft + \"px\";\n\n\n\t\t\t\t\t\t\t\t\t// ----- calculate Y\n\t\t\t\t\t\t\t\t\tvar quizPercentageY = parseFloat(quizPercentageYValue);\n\t\t\t\t\t\t\t\t\t// percentages are calculated according to draggable's center point, so we have to reverse that calculation to get new absolute position\n\t\t\t\t\t\t\t\t\tvar newAbsoluteTop = dropRect.top + dropRect.height * quizPercentageY - (quizHeight) / 2;\n\t\t\t\t\t\t\t\t\t// new relative position\n\t\t\t\t\t\t\t\t\tvar newTop = newAbsoluteTop - dragRect.top;\n\n\n\t\t\t\t\t\t\t\t\tdraggableElement.style.left = newLeft;\n\t\t\t\t\t\t\t\t\tdraggableElement.style.top = newTop;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// monitor draggable's container resize (use timeout to throtle events)\n\t\t\t\t\tvar RESIZE_EVENT_THROTLE_TIMEOUT = 100;\n\t\t\t\t\tvar timeoutHandle;\n\t\t\t\t\tnew ResizeSensor(containerElement, function () {\n\t\t\t\t\t\tif (timeoutHandle) clearTimeout(timeoutHandle);\n\t\t\t\t\t\ttimeoutHandle = setTimeout(function () {\n\t\t\t\t\t\t\ttimeoutHandle = null;\n\t\t\t\t\t\t\trecalculatePositions();\n\t\t\t\t\t\t}, RESIZE_EVENT_THROTLE_TIMEOUT);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tactivate: function (event) {\n\t\t\t\t// add active dropzone feedback\n\t\t\t\tevent.target.classList.add('drop-active');\n\t\t\t},\n\t\t\tover: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// feedback the possibility of a drop\n\t\t\t\tdropzoneElement.classList.add('drop-target');\n\t\t\t\tdraggableElement.classList.add('can-drop');\n\t\t\t\tdraggableElement.classList.add('can-drop-style');\n\n\t\t\t},\n\t\t\tout: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// remove the drop feedback style\n\t\t\t\tdropzoneElement.classList.remove('drop-target');\n\t\t\t\tdraggableElement.classList.remove('can-drop');\n\t\t\t\tdraggableElement.classList.remove('element-correct');\n\t\t\t\tdraggableElement.classList.remove('element-notcorrect');\n\t\t\t\tdraggableElement.classList.remove('can-drop-style');\n\t\t\t\tdraggableElement.classList.remove('draggable-active');\n\n\t\t\t\tdraggableElement.setAttribute('data-quiz-width', \"-1\");\n\t\t\t\tdraggableElement.setAttribute('data-quiz-height', \"-1\");\n\n\t\t\t\tdraggableElement.setAttribute('data-quiz-percentage-x', \"-1\");\n\t\t\t\tdraggableElement.setAttribute('data-quiz-percentage-y', \"-1\");\n\t\t\t},\n\t\t\tdrop: function (event, ui) {\n\t\t\t\tfunction findPositionPercentage(start, end, position) {\n\t\t\t\t\treturn (position - start) / (end - start);\n\t\t\t\t}\n\n\t\t\t\tfunction checkPercentage(percentage) {\n\t\t\t\t\tif (percentage < 0) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} else if (percentage > 1) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn percentage;\n\t\t\t\t}\n\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t//with rect.top or rect.left you can get coordinates\n\t\t\t\tvar dragRect = draggableElement.getBoundingClientRect();\n\t\t\t\tvar dropRect = dropzoneElement.getBoundingClientRect();\n\n\t\t\t\tvar centerDragX = (dragRect.right + dragRect.left) / 2;\n\t\t\t\tvar centerDragY = (dragRect.top + dragRect.bottom) / 2;\n\n\t\t\t\tvar percentageX = checkPercentage(findPositionPercentage(dropRect.left, dropRect.right, centerDragX));\n\t\t\t\tvar percentageY = checkPercentage(findPositionPercentage(dropRect.top, dropRect.bottom, centerDragY));\n\n\t\t\t\tdraggableElement.setAttribute('data-quiz-width', dragRect.width);\n\t\t\t\tdraggableElement.setAttribute('data-quiz-height', dragRect.height);\n\n\t\t\t\tdraggableElement.setAttribute('data-quiz-percentage-x', percentageX);\n\t\t\t\tdraggableElement.setAttribute('data-quiz-percentage-y', percentageY);\n\n\t\t\t\tvar questionNum = draggableElement.id.split(\"q\")[1].split(\"a\")[0];\n\t\t\t\tvar answerNum = draggableElement.id.split(\"a\")[1];\n\n\t\t\t\t// snap draggable to dropzone\n\t\t\t\tif (draggableElement.classList.contains(\"dd-solution\") && !dropzoneElement.classList.contains(\"picture-dropzone-quiz\")) {\n\t\t\t\t\tui.draggable.position({\n\t\t\t\t\t\tof: $(this),\n\t\t\t\t\t\tmy: 'center',\n\t\t\t\t\t\tat: 'middle'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeactivate: function (event, ui) {\n\t\t\t\tvar draggableElement = ui.draggable.get(0),\n\t\t\t\t\tdropzoneElement = event.target;\n\n\t\t\t\t// remove active dropzone feedback\n\t\t\t\tdropzoneElement.classList.remove('drop-active');\n\t\t\t\tdropzoneElement.classList.remove('drop-target');\n\t\t\t\tdraggableElement.classList.remove('can-drop');\n\t\t\t}\n\t\t});\n}\n\n// Drag on picture elements can be added dynamically in quiz editor thus this has been extracted to a separate function\nfunction initDragOnPictureAnswerElement(element) {\n\t$(element)\n\t\t.draggable({\n\t\t\trevert: 'invalid',\n\t\t\tdistance: 7,\n\n\t\t\tstart: function (event) {\n\t\t\t\tvar draggableElement = event.target;\n\n\t\t\t\tdraggableElement.classList.remove('success');\n\t\t\t\tdraggableElement.classList.remove('danger');\n\t\t\t\tdraggableElement.classList.add('can-drop');\n\n\t\t\t\t// mark element as being active\n\t\t\t\tdraggableElement.classList.add('draggable-active');\n\n\t\t\t\tDragCounter.onDragStart(draggableElement);\n\t\t\t},\n\t\t\tstop: function (event) {\n\t\t\t\tvar draggableElement = event.target;\n\n\t\t\t\tdraggableElement.classList.remove('can-drop');\n\n\t\t\t\t// unmark active element\n\t\t\t\tdraggableElement.classList.remove('draggable-active');\n\n\t\t\t\tDragCounter.onDragEnd(draggableElement);\n\t\t\t}\n\t\t})\n\t\t// containment - we are targeting element's ancestor, not unique element\n\t\t.each(function () {\n\t\t\t$(this).draggable({\n\t\t\t\tcontainment: $(this).closest('.draggable-area')\n\t\t\t});\n\t\t});\n}\n\n// ---------- initialize \"click to grab, click to release\" for drag on picture elements\n\nfunction initDragOnPictureAnswerElementByClick(element) {\n\tlet draggableElement;\n\tlet taskId;\n\n\t$(element).off('draggable click').on('click', function (event) {\n\t\tif (event.which === 1) {\n\t\t\ttaskId = getParentQuestionTopElement(event.target).getAttribute('id');\n\n\t\t\tif ($('.draggable-restricted.can-drop').length) {\n\t\t\t\t$('.draggable-restricted.can-drop').removeClass('can-drop draggable-active over');\n\t\t\t}\n\n\t\t\tdraggableElement = element;\n\t\t\tdraggableElement.classList.add('can-drop');\n\n\t\t\tdropAnswerElementOnPicture(draggableElement, taskId);\n\t\t}\n\t});\n}\n\nfunction dropAnswerElementOnPicture(draggableElement, taskId) {\n\t$(`#${taskId} .picture-droparea`).off('click').on('click', function (event) {\n\t\tfunction findPositionPercentage(start, end, position) {\n\t\t\treturn (position - start) / (end - start);\n\t\t}\n\n\t\tfunction checkPercentage(percentage) {\n\t\t\tif (percentage < 0) {\n\t\t\t\treturn 0;\n\t\t\t} else if (percentage > 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn percentage;\n\t\t}\n\n\t\tvar dropzoneElement = event.target;\n\n\t\t//with rect.top or rect.left you can get coordinates\n\t\tvar dragRect = draggableElement.getBoundingClientRect();\n\t\tvar dropRect = dropzoneElement.getBoundingClientRect();\n\n\t\tvar percentageX = checkPercentage(findPositionPercentage(dropRect.left, dropRect.right, event.clientX));\n\t\tvar percentageY = checkPercentage(findPositionPercentage(dropRect.top, dropRect.bottom, event.clientY));\n\n\t\tdraggableElement.setAttribute('data-quiz-width', dragRect.width);\n\t\tdraggableElement.setAttribute('data-quiz-height', dragRect.height);\n\n\t\tdraggableElement.setAttribute('data-quiz-percentage-x', percentageX);\n\t\tdraggableElement.setAttribute('data-quiz-percentage-y', percentageY);\n\n\t\t// get positioned draggables' positions\n\t\tvar quizPercentageXValue = parseFloat(draggableElement.getAttribute('data-quiz-percentage-x') || -1);\n\t\tvar quizPercentageYValue = parseFloat(draggableElement.getAttribute('data-quiz-percentage-y') || -1);\n\t\tvar quizWidth = parseFloat(draggableElement.getAttribute('data-quiz-width') || -1);\n\t\tvar quizHeight = parseFloat(draggableElement.getAttribute('data-quiz-height') || -1);\n\n\t\t// get positioned draggables' positions\n\t\tif (quizPercentageXValue >= 0 && quizPercentageXValue >= 0) {\n\t\t\t/*\n\t\t\t\t\t\t * Draggables are positioned relatively to starting position. In order to reposition them properly after\n\t\t\t\t\t\t * resize, we have to reset their positioning to get new starting points and then calculate new postions\n\t\t\t\t\t\t * relatively to them.\n\t\t\t\t\t\t */\n\t\t\tdraggableElement.style.transform = '';\n\t\t\t// ----- calculate X\n\t\t\tvar quizPercentageX = parseFloat(quizPercentageXValue);\n\t\t\t// percentages are calculated according to draggable's center point, so we have to reverse that calculation to get new absolute position\n\t\t\tvar newAbsoluteLeft = dropRect.left + dropRect.width * quizPercentageX - quizWidth / 2;\n\t\t\t// new relative position\n\t\t\tvar newLeft = newAbsoluteLeft - dragRect.left;\n\t\t\t// set new horizontal position\n\n\t\t\t// ----- calculate Y\n\t\t\tvar quizPercentageY = parseFloat(quizPercentageYValue);\n\t\t\t// percentages are calculated according to draggable's center point, so we have to reverse that calculation to get new absolute position\n\t\t\tvar newAbsoluteTop = dropRect.top + dropRect.height * quizPercentageY - quizHeight / 2;\n\t\t\t// new relative position\n\t\t\tvar newTop = newAbsoluteTop - dragRect.top;\n\n\t\t\tif (!draggableElement.style.left && !draggableElement.style.top) {\n\t\t\t\t$(draggableElement).css({\n\t\t\t\t\ttop: newTop,\n\t\t\t\t\tleft: newLeft,\n\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\tcolor: '#000',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tnewLeft = newLeft + parseFloat(draggableElement.style.left);\n\t\t\t\tnewTop = newTop + parseFloat(draggableElement.style.top);\n\t\t\t\t$(draggableElement).css({\n\t\t\t\t\ttop: newTop,\n\t\t\t\t\tleft: newLeft,\n\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\tcolor: '#000',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n}\n\n// ---------- initialize \"click to grab, click to release\" for drag elements\n\nfunction initDragOnElementClick() {\n\tlet taskId;\n\tlet taskType;\n\tlet draggableElement;\n\tlet dropzoneElement;\n\n\t$('.draggable.dos-answer-draggable, .pair-draggable').off('draggable click').on('click', function (event) {\n\t\t// if left mouse click\n\t\tif (event.which === 1) {\n\t\t\tif ($('.draggable.dos-answer-draggable, .pair-draggable').draggable()) {\n\t\t\t\t$('.draggable.dos-answer-draggable, .pair-draggable').draggable('disable');\n\t\t\t}\n\n\t\t\ttaskId = `${$(event.target).closest('div[id*=\"_questionId_\"]').attr('id')}`;\n\n\t\t\t// find question type\n\t\t\tif (taskId) {\n\t\t\t\ttaskType = $($(`div[id*='${taskId}']`)[0]).attr('data-question-type');\n\t\t\t}\n\n\t\t\tif ($('.draggable.can-drop-style').length && taskType === questionTypes.dragElements) {\n\t\t\t\t$('.draggable.can-drop-style').removeClass('can-drop-style draggable-active over');\n\t\t\t}\n\n\t\t\tif (taskType === questionTypes.dragPairs || taskType === questionTypes.dragOrderElements) {\n\t\t\t\tif (!draggableElement) {\n\t\t\t\t\tif ($(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0]) {\n\t\t\t\t\t\tdraggableElement = $(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0];\n\t\t\t\t\t\tdraggableElement.focus();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdraggableElement = event.target;\n\t\t\t\t\t\tdraggableElement.focus();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($(draggableElement).closest('div[id*=\"_questionId_\"]').attr('id') === $(event.target).closest('div[id*=\"_questionId_\"]').attr('id')) {\n\t\t\t\t\t\tif ($(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0]) {\n\t\t\t\t\t\t\tdropzoneElement = $(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdropzoneElement = event.target;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ($(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0]) {\n\t\t\t\t\t\t\tdraggableElement = $(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdraggableElement = event.target;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (draggableElement && dropzoneElement && taskId === $(draggableElement).closest('div[id*=\"_questionId_\"]').attr('id')) {\n\t\t\t\t\tdraggableElement.blur();\n\t\t\t\t\treplacePairs(dropzoneElement, draggableElement);\n\n\t\t\t\t\tdraggableElement = null;\n\t\t\t\t\tdropzoneElement = null;\n\t\t\t\t\ttaskType = null;\n\t\t\t\t\ttaskId = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0]) {\n\t\t\t\t\tdraggableElement = $(event.target).parents('.draggable.dos-answer-draggable, .pair-draggable')[0];\n\t\t\t\t} else {\n\t\t\t\t\tdraggableElement = event.target;\n\t\t\t\t}\n\n\t\t\t\tif (taskType === questionTypes.dragElements) {\n\t\t\t\t\t$(draggableElement).addClass('can-drop-style');\n\t\t\t\t}\n\t\t\t}\n\t\t\t$('.draggable.dos-answer-draggable, .pair-draggable').draggable('enable');\n\t\t}\n\t});\n\n\t$('.dropzone, .dropzone-holder, .ui-droppable').on('click', function (event) {\n\t\tif (event.which === 1) {\n\t\t\ttaskId = `${$(event.target).closest('div[id*=\"_questionId_\"]').attr('id')}`;\n\n\t\t\tif (event.target.classList.contains('dropzone') && taskId === $(draggableElement).closest('div[id*=\"_questionId_\"]').attr('id')) {\n\t\t\t\tdragDropAction(event.target, taskId, draggableElement);\n\t\t\t\tdraggableElement = null;\n\t\t\t\tdropzoneElement = null;\n\t\t\t\ttaskType = null;\n\t\t\t\ttaskId = null;\n\t\t\t}\n\t\t}\n\t});\n}\n\n// ---------- initialize \"drag pairs\" question elements\n\nfunction initDragPairsElements(questionId) {\n\tresetQuizQuestion(questionId, true);\n\n\tvar questionContextElement = questionId && document.getElementById(questionId) || document;\n\n\tlet draggableElement;\n\tlet dropzoneElement;\n\n\t// ----- initialize switchable pairs\n\t$(\".pair-draggable\", questionContextElement)\n\t\t.draggable({\n\t\t\trevert: 'invalid',\n\t\t\t// TODO: custom overlapping\n\t\t\ttolerance: 'intersect',\n\t\t\tdistance: 7,\n\n\t\t\tstart: function (event) {\n\t\t\t\tdraggableElement = event.target;\n\t\t\t\t$(\".pair-draggable\").off('click');\n\n\t\t\t\t// mark element as being active\n\t\t\t\tdraggableElement.classList.add('draggable-active');\n\t\t\t},\n\n\t\t\t// call this function on every dragend event\n\t\t\tstop: function (event) {\n\t\t\t\tevent.target.style.left = \"\";\n\t\t\t\tevent.target.style.top = \"\";\n\n\t\t\t\t// unmark active element\n\t\t\t\tevent.target.classList.remove('draggable-active');\n\t\t\t\tevent.target.classList.remove('can-drop-style');\n\t\t\t\tif ($(event.target).closest(\"div[id*='uestionId']\").find('.over')[0]) {\n\t\t\t\t\t$(event.target).closest(\"div[id*='uestionId']\").find('.over')[0].classList.remove('over');\n\t\t\t\t}\n\t\t\t\tinitDragOnElementClick();\n\t\t\t}\n\t\t})\n\t\t// containment - we are targeting element's ancestor, not unique element\n\t\t.each(function () {\n\t\t\t$(this).draggable({\n\t\t\t\tcontainment: $(this).closest('.question')\n\t\t\t});\n\t\t});\n\n\n\t// enable draggables to be dropped into this\n\t$(\".pair-draggable\", questionContextElement)\n\t\t.droppable({\n\t\t\t// TODO: custom overlapping\n\t\t\ttolerance: 'intersect',\n\n\t\t\tover: function (event) {\n\t\t\t\tdropzoneElement = event.target;\n\t\t\t\tdropzoneElement.classList.add('over');\n\t\t\t},\n\t\t\tout: function (event) {\n\t\t\t\t// remove the drop feedback style\n\t\t\t\tevent.target.classList.remove('over');\n\t\t\t},\n\t\t\tdrop: function (event, ui) {\n\t\t\t\t// the same el can be draggable AND dropzone, we have to remove activity class to prevent it from being copied to dropzone el\n\t\t\t\tif (draggableElement) {\n\t\t\t\t\tdraggableElement.classList.remove('draggable-active');\n\t\t\t\t\tdraggableElement.classList.remove('can-drop-style');\n\t\t\t\t}\n\t\t\t\tevent.target.classList.remove('over');\n\n\t\t\t\tif (dropzoneElement && draggableElement) {\n\t\t\t\t\treplacePairs(dropzoneElement, draggableElement);\n\t\t\t\t\tdraggableElement = null;\n\t\t\t\t\tdropzoneElement = null;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t// TODO: use CSS selection prevention\n\t\t.disableSelection();\n}\n\nfunction initKeyboardDragDrop() {\n\tlet draggableTaskIds = [];\n\n\t$('.draggable.dos-answer-draggable, .pair-draggable').each((index, el) => {\n\t\tif (draggableTaskIds.indexOf($(el).closest('div[id*=\"_questionId_\"]').attr('id')) < 0) {\n\t\t\tdraggableTaskIds.push($(el).closest('div[id*=\"_questionId_\"]').attr('id'));\n\t\t}\n\t});\n\n\tdraggableTaskIds.forEach((taskId, index) => {\n\t\tif ($(`#${taskId}`).attr('data-question-type') !== questionTypes.dragElements) {\n\t\t\t$(`#${taskId} .draggable, .pair-draggable`).each((index, el) => {\n\t\t\t\tel.setAttribute('tabindex', 0);\n\t\t\t\tel.setAttribute('aria-label', `${el.innerText} - draggable`);\n\t\t\t\tel.setAttribute('aria-grabbed', 'false');\n\t\t\t\tel.setAttribute('aria-haspopup', 'true');\n\t\t\t\tel.setAttribute('role', 'listitem');\n\n\t\t\t\tdrag.initialise(el);\n\t\t\t});\n\t\t\t$(`#${taskId} .dropzone`).each((index, el) => {\n\t\t\t\tel.setAttribute('tabindex', 0);\n\t\t\t\tel.setAttribute('aria-selected', 'true');\n\t\t\t\tel.setAttribute('role', 'button');\n\t\t\t});\n\t\t} else {\n\t\t\t$(`#${taskId} .dropzone`).each((index, el) => {\n\t\t\t\tel.setAttribute('tabindex', 0);\n\t\t\t\tel.setAttribute('aria-selected', 'true');\n\t\t\t\tel.setAttribute('aria-haspopup', 'true');\n\t\t\t\tel.setAttribute('role', 'listitem');\n\n\t\t\t\tdrag.initialise(el);\n\t\t\t});\n\t\t}\n\t});\n\n\tdraggableTaskIds.forEach(taskId => {\n\t\tlet assigmentControlElement = $($(`#${taskId}`)[0]).find('.dos-part-question__controls')[0];\n\t\t$(assigmentControlElement).children().each((index, childElement) => {\n\t\t\tchildElement.setAttribute('tabindex', 0);\n\t\t});\n\t\tassigmentControlsClickHandler($(assigmentControlElement).children()[1], taskId);\n\t});\n}\n\nfunction assigmentControlsClickHandler(focusedElement, taskId) {\n\tif (focusedElement) {\n\t\tfocusedElement.onkeydown = function (focusedElement) {\n\t\t\tif (focusedElement.keyCode === 13) {\n\t\t\t\tresetQuizQuestion(taskId);\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction replacePairs(dropzoneElement, draggableElement) {\n\tvar dropzoneElementContent;\n\tvar dropzoneElementCorrectPair;\n\tvar dropzoneElementClasslist;\n\tif (dropzoneElement && draggableElement) {\n\t\tdropzoneElementContent = dropzoneElement.innerHTML;\n\t\tdropzoneElementCorrectPair = dropzoneElement.dataset.correctPair;\n\t\tdropzoneElementClasslist = dropzoneElement.classList.value;\n\n\t\t// update dropzones content\n\t\tdropzoneElement.innerHTML = draggableElement.innerHTML;\n\t\tdropzoneElement.dataset.correctPair = draggableElement.dataset.correctPair;\n\t\tdropzoneElement.classList.value = draggableElement.classList.value;\n\n\t\t// update draggable's content\n\t\tdraggableElement.innerHTML = dropzoneElementContent;\n\t\tdraggableElement.dataset.correctPair = dropzoneElementCorrectPair;\n\t\tdraggableElement.classList.value = dropzoneElementClasslist;\n\t}\n\n\treturn;\n}\n\nfunction dragDropAction(event, taskId, draggableElement) {\n\tif (taskId) {\n\t\ttaskType = $($(`div[id*='${taskId}']`)[0]).attr('data-question-type');\n\t}\n\n\tif (taskType && taskType === 'Razvrstavanje elemenata') {\n\t\tevent.style.height = 'auto';\n\t\tevent.style.display = 'inline-block';\n\t}\n\n\tif (draggableElement !== event && taskId === $(event).closest('div[id*=\"_questionId_\"]').attr('id')) {\n\t\t$(draggableElement).detach().css({ top: 0, left: 0 }).appendTo(event);\n\t}\n\n\t$('.can-drop-style').removeClass('can-drop-style draggable-active over');\n\n\tif (taskType === 'Povlačenje parova') {\n\t\tif ($(event).attr(\"data-correct-pair\")) {\n\t\t\tevent.style.backgroundColor = '#FFFFFF';\n\t\t\tdraggableElement.style.backgroundColor = '#FFFFFF';\n\t\t}\n\t}\n\n\tif (taskType && taskId === $(event).closest('div[id*=\"_questionId_\"]').attr('id')) {\n\t\tif (!event.classList.contains(\"pill-container\")) {\n\t\t\tif (event.getAttribute(\"id\") && draggableElement) {\n\t\t\t\tdraggableElement.setAttribute('data-dragged-group-value', event.getAttribute(\"id\").split('a')[1]);\n\t\t\t} else {\n\t\t\t\tif (draggableElement) {\n\t\t\t\t\tdraggableElement.setAttribute('data-dragged-group-value', '-1');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$($(`#${taskId}`).find('.pill-container').children()[0]).css({ 'display': 'inline-block' });\n\t\t\t$($(draggableElement).closest('.hidetext')[0]).removeClass('hidetext');\n\t\t\t$($(draggableElement).closest('.sortgroup')[0]).css({ 'font-weight': '300', 'font-size': 18 });\n\t\t\t// snap draggable to dropzone\n\t\t\tif (taskType === 'Razvrstavanje elemenata') {\n\t\t\t\t$(draggableElement).position({\n\t\t\t\t\tof: $(event),\n\t\t\t\t\tmy: \"left top\",\n\t\t\t\t\tat: \"left top\",\n\t\t\t\t}).css({\n\t\t\t\t\t'position': 'relative',\n\t\t\t\t\t'left': '0px',\n\t\t\t\t\t'top': '0px',\n\t\t\t\t\t'float': 'left',\n\t\t\t\t\t'border-radius': '2px',\n\t\t\t\t\t'text-align': 'center',\n\t\t\t\t\t'cursor': 'pointer',\n\t\t\t\t\t'z-index': 1,\n\t\t\t\t\t'line-height': '130%',\n\t\t\t\t\t'margin': '5px',\n\t\t\t\t}).removeClass('can-drop-style draggable-active focus');\n\t\t\t} else if (taskType === 'Povlačenje riječi') {\n\t\t\t\tif ($(event).children().length > 1) {\n\t\t\t\t\t$($(event).children()[0]).detach().css({\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t}).appendTo($(`#${taskId}`).find('.dos-answer-wrapper')[0]).attr('data-dragged-group-value', '-1');\n\t\t\t\t}\n\n\t\t\t\tif (event.classList.contains('dropzone-holder')) {\n\t\t\t\t\t$(draggableElement).detach().css({\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t}).appendTo($(`#${taskId}`).find('.dos-answer-wrapper')[0]);\n\t\t\t\t} else {\n\t\t\t\t\t$(event).css({\n\t\t\t\t\t\t// 'z-index': 0,\n\t\t\t\t\t\t'transform': 'translateY(10px)',\n\t\t\t\t\t\t// 'height': '72px',\n\t\t\t\t\t\t'position': 'relative',\n\t\t\t\t\t\t//'width': $(draggableElement).width() + parseInt($(draggableElement).css('padding-left')) + parseInt($(draggableElement).css('padding-right')) + (parseInt($(draggableElement).css('border-width')) * 2) + 'px',\n\t\t\t\t\t});\n\n\t\t\t\t\t$(draggableElement).position({\n\t\t\t\t\t\tof: $(event),\n\t\t\t\t\t\tmy: \"left middle\",\n\t\t\t\t\t\tat: \"left middle\",\n\t\t\t\t\t}).css({\n\t\t\t\t\t\t'position': 'relative',\n\t\t\t\t\t\t'float': 'left',\n\t\t\t\t\t\t'text-align': 'center',\n\t\t\t\t\t\t'cursor': 'pointer',\n\t\t\t\t\t\t// 'word-wrap': 'break-word',\n\t\t\t\t\t}).removeClass('can-drop-style draggable-active focus');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tevent.classList.remove('drop-polje-hover');\n\t\tevent.classList.remove('over');\n\t}\n}\n\nlet drag = {\n\tcurrentObject: null,\n\ttaskId: null,\n\ttaskType: null,\n\tinitialise: function (element) {\n\t\t// Add event handlers\n\t\telement.onclick = function () {\n\t\t\tthis.focus();\n\t\t};\n\t\telement.onkeydown = drag.keyboardDragDrop;\n\t\tdocument.body.onclick = drag.removePopup;\n\t},\n\n\tkeyboardDragDrop: function (event) {\n\t\tfocusedItem = event.target;\n\t\tevent.preventDefault();\n\t\tdrag.currentObject = this;\n\t\tdrag.taskId = `${$(focusedItem).closest('div[id*=\"_questionId_\"]').attr('id')}`;\n\t\tif (drag.taskId) {\n\t\t\tif ($(`div[id*='${drag.taskId}']`)[0]) {\n\t\t\t\tdrag.taskType = $(`div[id*='${drag.taskId}']`)[0].getAttribute('data-question-type');\n\t\t\t}\n\t\t}\n\t\tlet answerId = drag.taskId.split('uestionId_')[0] + drag.taskId.split('uestionId_')[1] + 'a';\n\t\tlet objMenu, objItem;\n\t\tlet objEvent = event || window.event;\n\n\t\tif (objEvent.keyCode === 32) {\n\t\t\tif (!$(focusedItem).children('#popup').length) {\n\t\t\t\tobjMenu = document.createElement('ul');\n\t\t\t\tobjMenu.setAttribute('id', 'popup');\n\t\t\t\tobjMenu.setAttribute('role', 'menu');\n\t\t\t\tobjMenu.setAttribute('style', 'margin: 25px 5px 20px;');\n\n\t\t\t\tif (drag.taskType === 'Razvrstavanje elemenata') {\n\t\t\t\t\tfor (i = 0; i < $(`[id*=\"${answerId}\"]`).length; i++) {\n\t\t\t\t\t\tif (!$(focusedItem).attr('keyboard-drag-menu')) {\n\t\t\t\t\t\t\tobjItem = document.createElement('li');\n\t\t\t\t\t\t\tobjItem.innerHTML = `${$($(`[id*=\"${answerId}\"]`)[i]).parent().find('.dos-drag-area__label').text()}`;\n\t\t\t\t\t\t\tobjItem.tabIndex = 0;\n\t\t\t\t\t\t\tobjItem.setAttribute('role', 'menuitem');\n\t\t\t\t\t\t\tobjItem.setAttribute('keyboard-drag-menu', true);\n\t\t\t\t\t\t\tif (!$(focusedItem).parent()[0].classList.contains('dropzone')) {\n\t\t\t\t\t\t\t\tfocusedItem.style.position = 'absolute';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobjItem.onkeydown = drag.handleItemChoice;\n\t\t\t\t\t\tobjMenu.appendChild(objItem);\n\t\t\t\t\t\tfocusedItem.appendChild(objMenu);\n\t\t\t\t\t\tfocusedItem.setAttribute('style', 'z-index: 2;');\n\t\t\t\t\t}\n\n\t\t\t\t\t$(objMenu).children().each((index, el) => {\n\t\t\t\t\t\tel.id = answerId + index;\n\t\t\t\t\t});\n\t\t\t\t} else if (drag.taskType === 'Povlačenje parova') {\n\t\t\t\t\tfor (i = 0; i < $(`#${drag.taskId}`).find('.pair-static').length; i++) {\n\t\t\t\t\t\tif (!$(focusedItem).attr('keyboard-drag-menu')) {\n\t\t\t\t\t\t\tobjItem = document.createElement('li');\n\t\t\t\t\t\t\tobjItem.innerHTML = `${$($(`#${drag.taskId}`).find('.pair-static')[i]).text()}`;\n\t\t\t\t\t\t\tobjItem.tabIndex = 0;\n\t\t\t\t\t\t\tobjItem.setAttribute('data-correct-pair', `${$($(`#${drag.taskId}`).find('.pair-static')[i]).attr('data-correct-pair')}`);\n\t\t\t\t\t\t\tobjItem.setAttribute('role', 'menuitem');\n\t\t\t\t\t\t\tobjItem.setAttribute('keyboard-drag-menu', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobjItem.onkeydown = drag.handleItemChoice;\n\t\t\t\t\t\tobjMenu.appendChild(objItem);\n\t\t\t\t\t\tfocusedItem.appendChild(objMenu);\n\t\t\t\t\t\tfocusedItem.setAttribute('style', 'z-index: 2;');\n\t\t\t\t\t}\n\t\t\t\t} else if (drag.taskType === 'Povlačenje riječi') {\n\t\t\t\t\tfor (i = 0; i < $(`#${drag.taskId}`).find('.draggable.dos-answer-draggable').length; i++) {\n\t\t\t\t\t\tif (!$(focusedItem).attr('keyboard-drag-menu')) {\n\t\t\t\t\t\t\tobjItem = document.createElement('li');\n\t\t\t\t\t\t\tobjItem.innerHTML = `${$($(`#${drag.taskId}`).find('.draggable.dos-answer-draggable')[i]).text()}`;\n\t\t\t\t\t\t\tobjItem.tabIndex = 0;\n\t\t\t\t\t\t\tobjItem.setAttribute('data-correct-pair', `${$($(`#${drag.taskId}`).find('.draggable.dos-answer-draggable')[i]).attr('data-group')}`);\n\t\t\t\t\t\t\tobjItem.setAttribute('draggable-index', i);\n\t\t\t\t\t\t\tobjItem.setAttribute('role', 'menuitem');\n\t\t\t\t\t\t\tobjItem.setAttribute('keyboard-drag-menu', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (objItem) {\n\t\t\t\t\t\t\tobjItem.onkeydown = drag.handleItemChoice;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobjMenu.appendChild(objItem);\n\t\t\t\t\t\tfocusedItem.appendChild(objMenu);\n\t\t\t\t\t\tfocusedItem.setAttribute('style', 'z-index: 2;');\n\t\t\t\t\t}\n\t\t\t\t} else if (drag.taskType === 'Uređivanje poretka elemenata') {\n\t\t\t\t\tfor (i = 0; i < $(`#${drag.taskId}`).find('.pair-static').length; i++) {\n\t\t\t\t\t\tif (!$(focusedItem).attr('keyboard-drag-menu')) {\n\t\t\t\t\t\t\tobjItem = document.createElement('li');\n\t\t\t\t\t\t\tobjItem.innerHTML = `${$($(`#${drag.taskId}`).find('.pair-static')[i]).text()}`;\n\t\t\t\t\t\t\tobjItem.tabIndex = 0;\n\t\t\t\t\t\t\tobjItem.setAttribute('data-correct-pair', `${$($(`#${drag.taskId}`).find('.pair-static')[i]).attr('data-correct-pair')}`);\n\t\t\t\t\t\t\tobjItem.setAttribute('role', 'menuitem');\n\t\t\t\t\t\t\tobjItem.setAttribute('keyboard-drag-menu', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobjItem.onkeydown = drag.handleItemChoice;\n\t\t\t\t\t\tobjMenu.appendChild(objItem);\n\t\t\t\t\t\tfocusedItem.appendChild(objMenu);\n\t\t\t\t\t\tfocusedItem.setAttribute('style', 'z-index: 2;');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tobjMenu.firstChild.focus();\n\t\t\t\tobjMenu.firstChild.className = 'focus';\n\t\t\t}\n\t\t}\n\n\t\tif (objEvent.keyCode === 9 && !objEvent.shiftKey) {\n\t\t\tif ((drag.taskType === 'Povlačenje parova' || drag.taskType === 'Uređivanje poretka elemenata') && objEvent.target.parentNode.nextElementSibling) {\n\t\t\t\t$(objEvent.target.parentNode.nextElementSibling).children('.pair-draggable')[0].focus();\n\t\t\t} else if (drag.taskType === 'Povlačenje riječi') {\n\t\t\t\tlet nextId = `${objEvent.target.getAttribute('id').substring(0, objEvent.target.getAttribute('id').length - 1)}${parseInt(objEvent.target.getAttribute('id')[objEvent.target.getAttribute('id').length - 1]) + 1}`;\n\t\t\t\tif (document.getElementById(nextId)) {\n\t\t\t\t\tdocument.getElementById(nextId).focus();\n\t\t\t\t} else {\n\t\t\t\t\tif ($(`#${drag.taskId}`).find('.dos-part-question__controls').children()[0]) {\n\t\t\t\t\t\t$(`#${drag.taskId}`).find('.dos-part-question__controls').children()[0].focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($(`#${drag.taskId}`).find('.dos-part-question__controls').children()[0]) {\n\t\t\t\t\t$(`#${drag.taskId}`).find('.dos-part-question__controls').children()[0].focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (objEvent.keyCode === 9 && objEvent.shiftKey) {\n\t\t\t$(\":tabbable\")[$(\":tabbable\").index($(this)[0]) - 1].focus();\n\t\t}\n\t},\n\n\thandleItemChoice: function (item) {\n\t\tif (item.keyCode === 38) { // Up arrow\n\t\t\titem.target.classList.remove('focus');\n\t\t\tif (!item.target.previousSibling) {\n\t\t\t\tfocusListItemWS(item.target.nextSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfocusListItemWS(item.target.previousSibling);\n\t\t} else if (item.keyCode === 40) { // Down arrow\n\t\t\titem.target.classList.remove('focus');\n\t\t\tif (!item.target.nextSibling) {\n\t\t\t\tfocusListItemWS(item.target.previousSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfocusListItemWS(item.target.nextSibling);\n\t\t} else if (item.keyCode === 39) { // Left arrow\n\t\t\titem.target.classList.remove('focus');\n\t\t\tif (!item.target.previousSibling) {\n\t\t\t\tfocusListItemWS(item.target.nextSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfocusListItemWS(item.target.previousSibling);\n\t\t} else if (item.keyCode === 37) { // Right arrow\n\t\t\titem.target.classList.remove('focus');\n\t\t\tif (!item.target.nextSibling) {\n\t\t\t\tfocusListItemWS(item.target.previousSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfocusListItemWS(item.target.nextSibling);\n\t\t} else if (item.keyCode === 13) { // Enter key\n\t\t\tdrag.moveFocusedItemToDropzone(item.target);\n\t\t\tfocusListItemWS($(`#${drag.taskId}`).find('.draggable.dos-answer-draggable, .pair-draggable')[0]);\n\t\t} else if (item.keyCode === 9 || item.keyCode === 27) { // 9 is Tab - 27 is Esc\n\t\t\tdrag.handleBlur(item);\n\t\t}\n\t},\n\n\thandleBlur: function (item) {\n\t\tif (drag.taskType === 'Povlačenje parova' || drag.taskType === 'Uređivanje poretka elemenata') {\n\t\t\tdrag.removePopup();\n\t\t\treturn;\n\t\t}\n\n\t\tdrag.currentObject.removeAttribute('aria-owns');\n\t\tif (item.target.parentNode) {\n\t\t\titem.target.parentNode.remove();\n\t\t}\n\t\tdrag.currentObject.focus();\n\t\tdrag.removePopup();\n\t},\n\n\tremovePopup: function () {\n\t\tdocument.onkeydown = null;\n\n\t\tlet objPopup = document.getElementById('popup');\n\t\tif (objPopup) {\n\t\t\tlet objPopupParent = objPopup.parentNode;\n\t\t\t$(objPopup).remove();\n\t\t\tobjPopupParent.blur();\n\t\t}\n\t},\n\n\tmoveFocusedItemToDropzone: function (item) {\n\t\tif (drag.taskType === 'Razvrstavanje elemenata') {\n\t\t\tlet dropzone = $(`#${$(item).attr('id')}.dropzone`)[0];\n\t\t\tlet draggable = $(item).parents('.draggable.dos-answer-draggable, .pair-draggable')[0];\n\t\t\tdrag.removePopup();\n\n\t\t\tdragDropAction(dropzone, drag.taskId, draggable);\n\t\t} else if (drag.taskType === 'Povlačenje parova') {\n\t\t\tlet dropzone = $(`[data-correct-pair*='${item.getAttribute('data-correct-pair')}'].pair-static`).parent().children()[0];\n\t\t\tlet draggable = $(item).parents('.draggable.dos-answer-draggable, .pair-draggable')[0];\n\t\t\tdrag.removePopup();\n\t\t\treplacePairs(dropzone, draggable);\n\t\t} else if (drag.taskType === 'Povlačenje riječi') {\n\t\t\tlet dropzone = $(item).parents('.dropzone')[0];\n\t\t\tlet draggable = $(`#${drag.taskId} .draggable`)[$(item).attr('draggable-index')];\n\t\t\tdrag.removePopup();\n\t\t\tdraggable.classList.add('can-drop-style');\n\n\t\t\tdragDropAction(dropzone, drag.taskId, draggable);\n\t\t} else if (drag.taskType === 'Uređivanje poretka elemenata') {\n\t\t\tlet dropzone = $(`[data-correct-pair*='${item.getAttribute('data-correct-pair')}'].pair-static`).parent().children('.pair-draggable')[0];\n\t\t\tlet draggable = $(item).parents('.draggable.dos-answer-draggable, .pair-draggable')[0];\n\t\t\tdrag.removePopup();\n\t\t\treplacePairs(dropzone, draggable);\n\t\t}\n\t}\n};\n\n// handles focusing list item that pops up when weak sighted/blind people use the app\nfunction focusListItemWS(listItem) {\n\tif (listItem) {\n\t\tlistItem.focus();\n\t\tlistItem.className += ' focus';\n\t}\n}\n\n\n\nfunction initAdditionalKeyboardNav() {\n\t$('input:text').focus(function (event) {\n\t\tvar taskId = '#' + $(event.target).closest(\"div[id*='uestionId'][data-question-type]\").attr('id');\n\t\tvar keyboardContainer = $(taskId).find('.keyboard_container.dos-part');\n\t\tvar keyboardExists = keyboardContainer.length > 0;\n\t\tvar isKeyboardShown = keyboardContainer.attr('display') !== 'none';\n\t\tvar buttons = $(keyboardContainer[0]).find('button');\n\n\t\tevent.target.onkeydown = function (evt) {\n\t\t\tif (keyboardExists && isKeyboardShown) {\n\t\t\t\tif (evt.keyCode === 37) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t$($(buttons)[0]).focus();\n\t\t\t\t}\n\t\t\t\tif (evt.keyCode === 38) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t$($(buttons)[0]).focus();\n\t\t\t\t}\n\t\t\t\tif (evt.keyCode === 39) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t$($(buttons)[0]).focus();\n\t\t\t\t}\n\t\t\t\tif (evt.keyCode === 40) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t$($(buttons)[0]).focus();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tbuttons.on('keydown', function (evt) {\n\t\t\tif (evt.keyCode === 27) { // esc\n\t\t\t\tevent.target.focus();\n\t\t\t}\n\n\t\t\tif (evt.keyCode === 9 && evt.shiftKey && evt.target === buttons[0]) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\tevent.target.focus();\n\t\t\t}\n\t\t});\n\t});\n}\n\n\n\n// ---------- initialize static elements\ninitDragElementsElements();\ninitDragOnElementClick();\ninitDragOnPictureElements();\ninitKeyboardDragDrop();\n//initDragPairsElements(); // this init is called in \"setSortableElements()\" due to legacy reasons\n//initSortElements(); // this init is called in \"setSortableWitchConnection()\" due to legacy reasons\n\n\nfunction checkQuestionAnswer(questionId) {\n\tcheckQuizAnswers(questionId);\n}\n\nfunction toggleSolution(id) {\n\tvar solutionId = '#' + id;\n\t$(solutionId).toggleClass(\"question-element-hide\");\n}\n\nfunction isCloseEnough(realPosition, position, deviaton) {\n\treturn Math.abs(realPosition - position) <= deviaton;\n}\n\n/**\n * Calculates if the dropped element is closer than allowed deviation to the drop point in drag to image quizzes\n * The deviation is the same in X and Y because smaller dimension deviation is scaled. This avoids the situation\n * in which allowed deviation would be tiny in Y direction and normal in X direction in cases where for example the image\n * is short in height but long in width\n */\nfunction isGoodLocation(realPositionX, realPositionY, positionX, positionY, width, height) {\n\n\t//Set deviation to be equal for x and y\n\tvar deviation = 0.06;\n\tif (width >= height) {\n\t\tvar deviationX = deviation;\n\t\tvar deviationY = deviation * width / height;\n\t\tif (deviationY > 1) {\n\t\t\tdeviationY = 1;\n\t\t}\n\t} else {\n\t\tvar deviationY = deviation;\n\t\tvar deviationX = deviation * height / width;\n\t\tif (deviationX > 1) {\n\t\t\tdeviationX = 1;\n\t\t}\n\n\t}\n\n\tif (isCloseEnough(realPositionX, positionX, deviationX) && isCloseEnough(realPositionY, positionY, deviationY)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nvar outcomesInfo = {};\nvar questionData = {};\nvar outcomesEvaluationType = '';\nvar outcomesPercentageCutoff = 0;\n\nvar singleAnswerQuestionTypes = [questionTypes.truefalse, questionTypes.pair];\n\nfunction checkQuizAnswers(srcId) {\n\n\tif (srcId == undefined) {\n\t\tsrcId = \"quizSrc\";\n\t} else if (srcId.indexOf('quiz') !== -1) {\n\t\tvar quizElement = document.getElementById(srcId);\n\n\t\toutcomesEvaluationType = quizElement.getAttribute('data-outcome-evaluation-type');\n\t\toutcomesPercentageCutoff = Number(quizElement.getAttribute('data-outcome-percentage-cutoff')) / 100;\n\t\tclearOutcomeResults(srcId);\n\n\t\tvar questionDivs = $(quizElement).find('div[data-question-type]');\n\n\t\t//this is a check for whole page so iterate through each quiz individually\n\t\tfor (var n = 0; n < questionDivs.length; n++) {\n\t\t\tvar realSrcId = $(questionDivs[n]).attr('id');\n\t\t\tmodal2 = questionDivs[n];\n\n\t\t\tconst quizDerId = realSrcId.substring(0, realSrcId.indexOf('_'));\n\n\t\t\tvar inputs = $(questionDivs[n]).find(\"input[id*=\" + quizDerId + \"]\").toArray();\n\t\t\tvar questionElement = getParentQuestionTopElement(modal2);\n\t\t\tvar questionOutcomeId = fillOutcomeInfoData(modal2);\n\n\t\t\tvar questionType;\n\t\t\tvar isCompletelyCorrect = true;\n\n\t\t\twinAudio = null;\n\t\t\tloseAudio = null;\n\n\t\t\tresetQuizQuestionFeedback(realSrcId);\n\n\t\t\tanswerCheck(srcId, realSrcId, modal2, inputs, questionElement, questionOutcomeId, questionType, isCompletelyCorrect);\n\t\t}\n\n\t\tupdateOutcomeInfo(srcId);\n\t\tshowOutcomeResults(srcId);\n\n\t} else {\n\t\t//this is a check for one quiz so realsrcid is identical to srcid\n\t\trealSrcId = srcId;\n\t\tvar modal = document.getElementById(srcId);\n\t\tconst quizDerId = realSrcId.substring(0, realSrcId.indexOf('_'));\n\n\t\tvar inputs = $(modal).find(\"input[id*=\" + quizDerId + \"]\").toArray();\n\t\tvar questionElement = modal;\n\t\tvar questionOutcomeId = fillOutcomeInfoData(questionElement);\n\n\t\tvar questionType;\n\t\tvar isCompletelyCorrect = true;\n\n\t\tresetQuizQuestionFeedback(realSrcId);\n\n\t\tanswerCheck(srcId, realSrcId, modal, inputs, questionElement, questionOutcomeId, questionType, isCompletelyCorrect);\n\t}\n};\n\nconst getQuizSubelementById = (quizElement, id) => {\n\treturn $(quizElement).find('#' + id).get(0);\n};\n\nconst showHideQuizElement = (elementId, srcId) => {\n\tlet quizElement;\n\tif (srcId) {\n\t\tquizElement = document.getElementById(srcId);\n\t} else {\n\t\tquizElement = document.getElementById(\"quizSrc\");\n\t}\n\tif (getQuizSubelementById(quizElement, elementId).classList.contains('question-element-hide')) {\n\t\tgetQuizSubelementById(quizElement, elementId).classList.remove('question-element-hide');\n\t} else {\n\t\tgetQuizSubelementById(quizElement, elementId).classList.add('question-element-hide');\n\t}\n};\n\nconst getElementParentQuestionId = (element) => {\n\treturn $(element).closest('.question').get(0).getAttribute('id');\n};\n\nconst getParentQuestionTopElement = (element) => {\n\treturn $(element).closest(\"div[id*='uestionId'][data-question-type]\").get(0); // \"uestionId\" is not a typo, id is not consistently used in different environments\n};\nfunction fillOutcomeInfoData(question) {\n\n\tif (question.getAttribute('data-outcome-id') !== null) {\n\t\tvar outcomeId = question.getAttribute('data-outcome-id');\n\n\t\tif (outcomesInfo[outcomeId] === undefined) {\n\t\t\tvar outcomeName = question.getAttribute('data-outcome-name');\n\t\t\tvar outcomeDerInfo = [];\n\n\t\t\tif (question.getAttribute('data-outcome-der') !== null) {\n\t\t\t\toutcomeDerInfo = parseOutcomeDerData(question.getAttribute('data-outcome-der'));\n\t\t\t}\n\n\t\t\toutcomesInfo[outcomeId] = {\n\t\t\t\toutcomeName: outcomeName,\n\t\t\t\toutcomeDer: outcomeDerInfo,\n\t\t\t\tcorrectAnswered: 0,\n\t\t\t\ttotalCount: 0\n\t\t\t};\n\t\t}\n\n\t\treturn outcomeId;\n\t} else {\n\t\treturn null;\n\t}\n}\n\nfunction fillQuestionData(question, outcomeId) {\n\tconst id = question.getAttribute('id');\n\tif (!id) {\n\t\treturn;\n\t}\n\n\tif (!questionData[id]) {\n\t\tquestionData[id] = {\n\t\t\tid,\n\t\t\toutcomeId: outcomeId,\n\t\t\tanswerTotal: 1,\n\t\t\tcorrectCount: 0,\n\t\t\tquestionType: question.getAttribute('data-question-type'),\n\t\t\tpercentageShare: Number(question.getAttribute('data-outcome-percentage-share')),\n\t\t};\n\t} else {\n\t\tquestionData[id].answerTotal += 1;\n\t}\n}\n\nfunction addQuestionCorrectAnswerCount(question) {\n\tconst id = question.getAttribute('id');\n\tif (!id) {\n\t\treturn;\n\t}\n\n\tquestionData[id].correctCount += 1;\n}\n\nfunction updateOutcomeInfo() {\n\tfor (var key in questionData) {\n\t\tvar question = questionData[key];\n\t\tvar outcomeData = outcomesInfo[question.outcomeId];\n\n\t\tif (outcomeData !== undefined) {\n\t\t\taddOutcomeInfoTotal(question.outcomeId);\n\t\t\tif (question.correctCount === question.answerTotal) {\n\t\t\t\taddOutcomeInfoCorrect(question.outcomeId);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction resetQuiz(quizId) {\n\tconst quizElement = $(`div[id='${quizId}']`);\n\n\tconst questions = quizElement.find('div[data-question-type]').toArray();\n\tquestions.forEach((question) => {\n\t\tresetQuizQuestion(question.id, true);\n\t});\n\n\thideOutcomeResults(quizId);\n\n\tquizElement.find('.dos-collection-tasks-slider').slick('slickGoTo', 0, true); //reset slide index\n\n\tscrollToElement(quizElement.offset().top);\n};\n\nfunction hideOutcomeResults(quizId) {\n\tconst quizFeedbackSectionElement = $(`section[id*='unit-test-finished'][data-quiz-id='${quizId}']`);\n\n\tquizFeedbackSectionElement.hide();\n};\n\nfunction scrollToElement(topOffset) {\n\tconst headerHeight = $('header.dos-header').height();\n\n\t$('html, body').stop().animate({\n\t\t'scrollTop': topOffset - headerHeight, //remove header hight\n\t}, 800, 'swing', function () { });\n};\n\nfunction showOutcomeResults(quizId) {\n\n\tconst quizEvaluationData = {\n\t\ttotalQuestionWeight: 0,\n\t\tquestions: [],\n\t};\n\tObject.values(questionData).forEach(question => {\n\t\tquizEvaluationData.totalQuestionWeight += question.percentageShare;\n\t\tquizEvaluationData.questions.push({\n\t\t\tcorrect: question.answerTotal === question.correctCount,\n\t\t\t...question,\n\t\t});\n\t});\n\n\tconst correctAnsweredQuestions = quizEvaluationData.questions.filter(question => question.correct === true);\n\n\tconst quizFeedbackSectionElement = $(`section[id*='unit-test-finished'][data-quiz-id='${quizId}']`);\n\n\tquizFeedbackSectionElement.show();\n\n\tscrollToElement(quizFeedbackSectionElement.offset().top);\n\n\tvar correctPercentageAnchor = quizFeedbackSectionElement.find('#correct-question-percentage');\n\tvar outcomelistAnchor = quizFeedbackSectionElement.find('#outcomes-list');\n\tvar learnedOutcomeAnchor = quizFeedbackSectionElement.find('#correct-outcomes');\n\tvar repeatOutcomeAnchor = quizFeedbackSectionElement.find('#incorrect-outcomes');\n\n\tvar correctQuestionCountAnchor = quizFeedbackSectionElement.find('#correct-question-count');\n\tcorrectQuestionCountAnchor.html(correctAnsweredQuestions.length + '/' + quizEvaluationData.questions.length);\n\n\tquizFeedbackSectionElement.find(\"#progressbar\").progressbar({\n\t\tvalue: (correctAnsweredQuestions.length / quizEvaluationData.questions.length) * 100\n\t});\n\n\n\tvar learnedOutcomes = [];\n\tvar repeatOutcomes = [];\n\tif (outcomesEvaluationType === 'percentage') {\n\t\tconst correctAnsweredPercentage = quizEvaluationData.questions.reduce((prevValue, question, index) => {\n\t\t\tconst newShare = question.correct ? question.percentageShare / quizEvaluationData.totalQuestionWeight : 0;\n\t\t\treturn prevValue + newShare;\n\t\t}, 0) * 100;\n\n\t\tquizFeedbackSectionElement.find(\"#correct-outcome-text\").hide();\n\t\tquizFeedbackSectionElement.find(\"#incorrect-outcome-text\").hide();\n\t\tlearnedOutcomeAnchor.hide();\n\t\trepeatOutcomeAnchor.hide();\n\n\t\tcorrectPercentageAnchor.html(Math.round(correctAnsweredPercentage));\n\n\t\tconst allOutcomes = [];\n\t\tObject.values(outcomesInfo).forEach(function (outcomeInfo) {\n\t\t\tallOutcomes.push('<li>' + outcomeInfo.outcomeName + '</li>');\n\t\t});\n\n\t\toutcomelistAnchor.html(allOutcomes);\n\t}\n\n\tif (outcomesEvaluationType === 'cutoff') {\n\t\tObject.values(outcomesInfo).forEach(function (outcomeInfo) {\n\t\t\tif (outcomeInfo.correctAnswered / outcomeInfo.totalCount >= outcomesPercentageCutoff) {\n\t\t\t\tlearnedOutcomes.push('<li>' + outcomeInfo.outcomeName + '</li>');\n\t\t\t} else {\n\t\t\t\trepeatOutcomes.push('<li>' + outcomeInfo.outcomeName + '</li>');\n\t\t\t}\n\t\t});\n\n\t\tquizFeedbackSectionElement.find(\"#percentage-outcome-text\").hide();\n\t\tquizFeedbackSectionElement.find(\"#correct-percentage-text\").hide();\n\t\toutcomelistAnchor.hide();\n\n\t\tconst learnedOutcomesHTML = learnedOutcomes.reduce((prevValue, learnedOutcome, index) => {\n\t\t\treturn prevValue + learnedOutcome;\n\t\t}, '');\n\n\t\tlearnedOutcomeAnchor.html(learnedOutcomesHTML);\n\n\t\tconst repeatOutcomesHTML = repeatOutcomes.reduce((prevValue, repeatOutcome, index) => {\n\t\t\treturn prevValue + repeatOutcome;\n\t\t}, '');\n\n\t\trepeatOutcomeAnchor.html(repeatOutcomesHTML);\n\t}\n\n\tif (learnedOutcomes.length === 0) {\n\t\tquizFeedbackSectionElement.find(\"#correct-outcome-text\").hide();\n\t\tquizFeedbackSectionElement.find(\"#incorrect-outcome-divider\").hide();\n\t} else if (repeatOutcomes.length === 0) {\n\t\tquizFeedbackSectionElement.find(\"#incorrect-outcome-divider\").hide();\n\t\tquizFeedbackSectionElement.find(\"#incorrect-outcome-text\").hide();\n\t\tquizFeedbackSectionElement.find(\"#incorrect-outcome-unit-text\").hide();\n\t}\n\n}\n\nfunction clearOutcomeResults(quizId) {\n\tconst quizFeedbackSectionElement = $(`section[id*='unit-test-finished'][data-quiz-id='${quizId}']`);\n\tvar learnedOutcomeAnchor = quizFeedbackSectionElement.find('#correct-outcomes');\n\tvar repeatOutcomeAnchor = quizFeedbackSectionElement.find('#incorrect-outcomes');\n\tvar correctPercentageAnchor = quizFeedbackSectionElement.find('#correct-question-percentage');\n\tvar outcomelistAnchor = quizFeedbackSectionElement.find('#outcomes-list');\n\tvar correctQuestionCountAnchor = quizFeedbackSectionElement.find('#correct-question-count');\n\n\toutcomesInfo = {};\n\tquestionData = {};\n\n\tquizFeedbackSectionElement.find(\"#correct-outcome-text\").show();\n\tquizFeedbackSectionElement.find(\"#incorrect-outcome-text\").show();\n\tquizFeedbackSectionElement.find(\"#correct-percentage-text\").show();\n\tquizFeedbackSectionElement.find(\"#incorrect-outcome-divider\").show();\n\tlearnedOutcomeAnchor.html('');\n\trepeatOutcomeAnchor.html('');\n\tcorrectPercentageAnchor.html('');\n\toutcomelistAnchor.html('');\n\tcorrectQuestionCountAnchor.html('');\n}\n\nfunction getHrefForDer(der) {\n\tvar derUrl = der.url;\n\tif (derUrl.length === 0) {\n\t\treturn '';\n\t} else {\n\t\treturn 'href=\"' + derUrl + '\"';\n\t}\n}\n\nfunction parseOutcomeDerData(outcomeDerData) {\n\tvar outcomeDersInfo = outcomeDerData.split('|');\n\tvar outcomeDers = [];\n\n\tfor (var i = 0; i < outcomeDersInfo.length; i++) {\n\t\tvar outcomeDerInfo = outcomeDersInfo[i].split(';');\n\t\tvar der = {};\n\t\tfor (j = 0; j < outcomeDerInfo.length; j++) {\n\t\t\tvar outcomeDerParams = outcomeDerInfo[j].split(':');\n\t\t\tder[outcomeDerParams[0]] = outcomeDerParams[1];\n\t\t}\n\n\t\toutcomeDers.push(der);\n\t}\n\n\treturn outcomeDers;\n}\n\nfunction addOutcomeInfoTotal(outcomeId) {\n\tif (outcomeId !== null) {\n\t\toutcomesInfo[outcomeId].totalCount += 1;\n\t}\n}\n\nfunction addOutcomeInfoCorrect(outcomeId) {\n\tif (outcomeId !== null) {\n\t\toutcomesInfo[outcomeId].correctAnswered += 1;\n\t}\n}\n/**\n *\n *  Resets quiz to initial state\n */\nfunction resetQuizQuestion(index, isOnInit = false) {\n\tvar id = '#' + index;\n\n\tresetQuizQuestionFeedback(index);\n\n\t$(id).find(\"input:radio\").prop('checked', false);\n\t$(id).find(\"input:checkbox\").prop('checked', false);\n\t$(id).find(\"input:text\").val(\"\");\n\t$(id).find(\"input[type='number']\").val(\"\");\n\t$(id).find(\"select option\").attr(\"selected\", false);\n\t$(id).find(\"select\").toArray().forEach((answer) => {\n\t\tanswer.value = undefined;\n\t});\n\t$(id).find(\".can-drop-style\").removeClass(\"can-drop-style draggable-active\");\n\n\tvar draggables = $(id).find(\".draggable.dos-answer-draggable\");\n\tif (draggables.length) {\n\t\tinitDragOnElementClick();\n\t}\n\n\tconst dragSortAnswerElements = [];\n\tfor (var i = 0; i < draggables.length; i++) {\n\t\tif (draggables[i].getAttribute('data-dragged-group-value') > -1 && $(id).attr('data-question-type') === questionTypes.dragSortElements) {\n\t\t\tif ($(draggables[i]).children('#popup').length) {\n\t\t\t\t$(draggables[i]).children('#popup')[0].remove();\n\t\t\t}\n\t\t}\n\n\t\tif ($(id).attr('data-question-type') === questionTypes.dragSortElements) {\n\t\t\tdragSortAnswerElements.push(draggables[i]);\n\t\t}\n\n\t\tif ($(id).attr('data-question-type') === questionTypes.dragElements) {\n\t\t\t$(draggables[i]).detach().css({ top: 0, left: 0 }).appendTo($(id).find('.dos-answer-wrapper')[0]);\n\t\t\t$($(`${id} .dropzone`)[i]).css({ transform: 'translateY(10px)' });//.append('&nbsp;');\n\n\t\t\t// isOnInit is here because on page load all questions are reset an that focuses elements in the middle of the page\n\t\t\tif (!isOnInit) {\n\t\t\t\tfocusListItemWS($(id).find('.dropzone')[0]);\n\t\t\t}\n\n\t\t}\n\n\t\tdraggables[i].setAttribute(\"data-dragged-group-value\", \"-1\");\n\t\tdraggables[i].style.left = \"\";\n\t\tdraggables[i].style.top = \"\";\n\t}\n\n\tif (dragSortAnswerElements.length) {\n\t\tconst shuffledDragSortAnswerElements = shuffleArray(dragSortAnswerElements);\n\n\t\tif (shuffledDragSortAnswerElements.length) {\n\t\t\tfor (let i = 0; i < shuffledDragSortAnswerElements.length; i++) {\n\t\t\t\tif (i >= 1) {\n\t\t\t\t\t$(shuffledDragSortAnswerElements[i]).css({ display: 'none', position: 'absolute' }).detach().appendTo($(id).find('.pill-container')[0]);\n\t\t\t\t} else {\n\t\t\t\t\t$(shuffledDragSortAnswerElements[i]).css({ display: 'inline-block', position: 'absolute' }).detach().appendTo($(id).find('.pill-container')[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($(id).attr('data-question-type') === questionTypes.dragOnPicture) {\n\t\tvar draggablesRestricted = $(id).find(\".draggable-restricted\");\n\t\tfor (var i = 0; i < draggablesRestricted.length; i++) {\n\t\t\t$(draggablesRestricted[i]).detach().css({ position: 'relative' }).appendTo($(id).find('.answers-holder')[0]);\n\t\t\tdraggablesRestricted[i].style.left = \"\";\n\t\t\tdraggablesRestricted[i].style.top = \"\";\n\t\t\tdraggablesRestricted[i].setAttribute('data-quiz-width', \"-1\");\n\t\t\tdraggablesRestricted[i].setAttribute('data-quiz-height', \"-1\");\n\t\t\tdraggablesRestricted[i].setAttribute(\"data-quiz-percentage-x\", \"-1\");\n\t\t\tdraggablesRestricted[i].setAttribute(\"data-quiz-percentage-y\", \"-1\");\n\n\t\t\tif (draggablesRestricted[i].classList.contains('can-drop')) {\n\t\t\t\tdraggablesRestricted[i].classList.remove('can-drop');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($(id).attr('data-question-type') !== questionTypes.dragElements) {\n\t\t// isOnInit is here because on page load all questions are reset an that focuses elements in the middle of the page\n\t\tif (!isOnInit) {\n\t\t\tfocusListItemWS($(id).find('.draggable.dos-answer-draggable, .pair-draggable, .quiz-input, .ui-sortable-handle')[0]);\n\t\t}\n\t}\n\n\tvar draggablesRestricted = $(id).find(\".draggable-restricted\");\n\tfor (var i = 0; i < draggablesRestricted.length; i++) {\n\t\t$(draggablesRestricted[i]).detach().css({ position: 'relative' }).appendTo($(id).find('.answers-holder')[0]);\n\t\tdraggablesRestricted[i].style.left = \"\";\n\t\tdraggablesRestricted[i].style.top = \"\";\n\t\tdraggablesRestricted[i].setAttribute('data-quiz-width', \"-1\");\n\t\tdraggablesRestricted[i].setAttribute('data-quiz-height', \"-1\");\n\t\tdraggablesRestricted[i].setAttribute(\"data-quiz-percentage-x\", \"-1\");\n\t\tdraggablesRestricted[i].setAttribute(\"data-quiz-percentage-y\", \"-1\");\n\t}\n\n\t// ----- reset pair draggables\n\t// shuffle the connect pairs quiz so each time reset is called the ordering is different\n\tvar draggableParents = $(id).find(\".pair-draggable\").parents();\n\t// shuffle draggables\n\tvar shuffledDraggables = shuffleArray($(id).find(\".pair-draggable\").toArray());\n\t// attach shuffled draggables to parents\n\tif ($(id).attr('data-question-type') !== questionTypes.dragOrderElements) {\n\t\tdraggableParents.each(function (idx) {\n\t\t\t// use \"prepend\" because draggables must be the first cell in the row\n\t\t\t$(shuffledDraggables[idx]).prependTo(this);\n\t\t});\n\t} else {\n\t\tdraggableParents.each(function (idx) {\n\t\t\t// use \"prepend\" because draggables must be the first cell in the row\n\t\t\t$(shuffledDraggables[idx]).appendTo(this);\n\t\t});\n\t}\n\n\tconst answerElements = $(id + ' .sortableOrder').find(\"li\").toArray();\n\tconst sortListElement = $(id + ' .sortableOrder');\n\tsortListElement.empty();\n\tif (answerElements.length) {\n\t\tconst shuffledSortList = shuffleArray(answerElements);\n\t\tshuffledSortList.forEach(answer => {\n\t\t\t$(answer).appendTo(sortListElement);\n\t\t});\n\n\t}\n\n\t// REPL start\n\tif ($(id).attr(\"data-question-type\") === \"REPL zadatak\") {\n\t\tCode.reset(index);\n\t}\n\t// REPL end\n};\n\nfunction resetQuizQuestionFeedback(questionId) {\n\tvar id = '#' + questionId;\n\n\t$(`${id} .answer-correct`).replaceWith('');\n\t$(`${id} .answer-incorrect`).replaceWith('');\n\t$(`${id} .correct`).removeClass('correct');\n\t$(`${id} .incorrect`).removeClass('incorrect');\n\t$(id).find(\".danger\").removeClass(\"danger\");\n\t$(id).find(\".success\").removeClass(\"success\");\n\n\tvar smallElements = $(id).find(\"small\");\n\tfor (var i = 0; i < smallElements.length; i++) {\n\t\tsmallElements[i].textContent = \"\";\n\t}\n\n\tvar feedbacks = $(id).find(\".feedback\");\n\tfor (var i = 0; i < feedbacks.length; i++) {\n\t\tfeedbacks[i].classList.add('question-element-hide');\n\t}\n\n\t//Now try to remove messages in grouping and checkbox, move it to a special function if more messages are inserted\n\ttry {\n\t\tdocument.getElementById(\"list-correct-incorrect-\" + questionId).innerHTML = \"\";\n\t} catch (err) {\n\t\t//console.log(\"not group!\");\n\t}\n\ttry {\n\t\tvar checkboxMessages = document.getElementById(\"notCompletelyCorrect\" + questionId);\n\t\t//this.parent.removethis, seems to be the only way to do it\n\t\tcheckboxMessages.parentElement.removeChild(checkboxMessages);\n\t} catch (err) {\n\n\t}\n\ttry {\n\t\tdocument.getElementById(\"checkbox-comment-\" + questionId).innerHTML = \"\";\n\t} catch (err) {\n\n\t}\n\t//remove question feedbacks\n\ttry {\n\t\tdivToClean = document.getElementById(questionId);\n\t\tdivToClean = $(divToClean).find(\"div.question-feedback\")[0];\n\t\tdivToClean.innerHTML = \"\";\n\t} catch (err) {\n\n\t}\n};\n\nconst shuffleArray = (array) => {\n\tconst newArray = [...array];\n\n\tfor (let i = array.length - 1; i > 0; i--) {\n\t\tlet j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\t\t// swap elements array[i] and array[j]\n\t\t[newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n\t}\n\n\treturn newArray;\n};\n\nfunction collapseTags(text) {\n\tvar r = text.replace(/(<|&lt;)br\\s*\\/*(>|&gt;)/g, ' ').replace(/(<br>)/g, \" \").replace(/(&nbsp;)/g, \"\").replace(/(<p>)/, \"\").replace(/(<p>)/g, \"<br>\").replace(/(<\\/p>)/g, \" \").trim();\n\tconsole.log(r);\n\treturn r;\n};\n\n/**\n * Initialize dragable pairs question elements. This method is only a legacy stub because it is called from static JS.\n * // TOOD: change static JS to call \"init\" function directly\n */\nfunction setSortableElements(sortable_1, sortable_2) {\n\tvar combinedColumnSelector = \"#\" + sortable_1 + \",#\" + sortable_2;\n\n\t// find parent\n\tvar questionId = $(combinedColumnSelector).parents(\"[data-question-type]\").attr(\"id\");\n\n\tinitDragPairsElements(questionId);\n}\n\n/**\n * Initialize sort question elements. This method is only a legacy stub because it is called from static JS.\n * // TODO: this should be rewritten to have params like other \"init\" functions\n */\n// function setSortableWitchConnection(sortable_1, sortable_2, sortableGroup) {\n// \tinitSortElements(sortable_1, sortable_2, sortableGroup);\n// }\n\n/**\n * Connect selectable questions (radio, checkbox) with belonging label\n elements.\n * Usually, this is done using \"for\" attribut on LABEL but, for some\n reason,\n * clicking on for-connected label causes MS Edge to trigger stye\n recalculation\n * on entire document which results in super slow radio/checkbox buttons\n (~3s for single click).\n */\nfunction initSelectableAnswers(questionId) {\n\tvar $questionEl = $(\"#\" + questionId);\n\t// find questions input fields (radio, checkbox)\n\t// var $answers = $questionEl.find(\".dos-part-question__content\").find('input[id*=\"332_q\"]');\n\tvar $answers = $questionEl.find(\".question-body .quiz-input\");\n\t$answers.each(function () {\n\t\tvar $answ = $(this);\n\t\t// checkboxes are unselectable, unlike radio buttons\n\t\tvar isUnselectable = $answ.attr(\"type\") === \"checkbox\";\n\t\t// find belonging label and attach event listener which will un/check input field\n\t\t$answ.siblings(\"LABEL\").on(\"click\", function () {\n\t\t\t// unselectables ca n be toggled\n\t\t\tif (isUnselectable) {\n\t\t\t\t$answ.prop('checked', !$answ.prop('checked'));\n\t\t\t}\n\t\t\t// others are always checked\n\t\t\telse {\n\t\t\t\t$answ.prop('checked', true);\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction giveFeedback(objectid, feedbackText, thisid) {\n\t//add another if that checks if the id is the same so that if you click on two different icons it does not hide the previous ones hint\n\tobject = document.getElementById(thisid);\n\tfeedbackTextId = thisid.replace(\"fbb\", \"feedbackText\");\n\tfeedbackText = document.getElementById(feedbackTextId).textContent;\n\tfeedbackHTML = document.getElementById(feedbackTextId).innerHTML;\n\n\t//TODO find feedback by id\n\tquestionFeedbackDiv = $(object).closest('div.question').find('div.question-feedback')[0];\n\tquestionFeedbackDiv.innerHTML = \"<div class = question-feedback2>\" + feedbackHTML + \"</div>\";\n\tif ($(questionFeedbackDiv).hasClass('question-element-hide')) {\n\t\t//jquery does not have .remove so use a normal object not jquery one\n\t\tquestionFeedbackDiv.classList.remove('question-element-hide');\n\t}\n\t//if the helpdiv was last hidden by some other button, dont hide it, but do hide if it was last removed by the currently clicked button\n\telse if ($(questionFeedbackDiv).attr(\"last-modified-by\") == thisid) {\n\t\tquestionFeedbackDiv.classList.add('question-element-hide');\n\t}\n\t$(questionFeedbackDiv).attr(\"last-modified-by\", thisid);\n\t//console.log(object);\n}\n\nfunction answerCheck(srcId, realSrcId, modal, inputs, questionElement, questionOutcomeId, questionType, isCompletelyCorrect) {\n\n\tfor (var i = 0; i < inputs.length; i++) {\n\t\tfillQuestionData(questionElement, questionOutcomeId);\n\t\tif (inputs[i].type.toLowerCase() == \"checkbox\") {\n\t\t\t//Checkbox must notify if not all correct answers were selected, or if there is at least one incorrect\n\t\t\tquestionType = \"checkbox\";\n\n\t\t\tif (inputs[i].getAttribute(\"data-is-correct\") == \"true\" && inputs[i].checked) {\n\n\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML = \"  \" + '<div class=\"answer-correct\"> </div>' + \"  \";\n\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, inputs[i].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\n\t\t\t\tinputId = inputs[i].id;\n\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + inputs[i].id + \"feedbackText\" + \" id = '\" + inputs[i].id + \"fbb' \" + \"></div>\";\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(inputs[i].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (inputs[i].getAttribute(\"data-is-correct\") == \"false\" && inputs[i].checked) {\n\t\t\t\tisCompletelyCorrect = false;\n\n\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML = \"  \" + '<div class=\"answer-incorrect\"> </div>' + \"  \";\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, inputs[i].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\n\t\t\t\tinputId = inputs[i].id;\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + inputs[i].id + \"feedbackText\" + \" id = '\" + inputs[i].id + \"fbb' \" + \"></div>\";\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(inputs[i].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (inputs[i].getAttribute(\"data-is-correct\") == \"false\" && !inputs[i].checked) {\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t} else {\n\t\t\t\t//If unselected was a correct answer, set iscompletelycorrect to 0\n\t\t\t\tif (inputs[i].getAttribute(\"data-is-correct\") == \"true\") {\n\t\t\t\t\tisCompletelyCorrect = false;\n\t\t\t\t}\n\n\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").textContent = \"\";\n\n\t\t\t}\n\n\t\t} else if (inputs[i].type.toLowerCase() == \"radio\") {\n\t\t\tquestionType = \"radio\";\n\t\t\tif (inputs[i].getAttribute(\"data-is-correct\") == \"true\" && inputs[i].checked) {\n\n\t\t\t\tif (winAudio) {\n\t\t\t\t\twinAudio.play();\n\t\t\t\t}\n\n\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML = \"  \" + '<div class=\"answer-correct\"> </div>' + \"  \";\n\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, inputs[i].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\n\t\t\t\tinputId = inputs[i].id;\n\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + inputs[i].id + \"feedbackText\" + \" id = '\" + inputs[i].id + \"fbb' \" + \" ></div>\";\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(inputs[i].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (inputs[i].getAttribute(\"data-is-correct\") == \"false\" && inputs[i].checked) {\n\n\t\t\t\tif (loseAudio) {\n\t\t\t\t\tloseAudio.play();\n\t\t\t\t}\n\n\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML = \"  \" + '<div class=\"answer-incorrect\"> </div>' + \"  \";\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, inputs[i].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\n\t\t\t\tinputId = inputs[i].id;\n\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + inputs[i].id + \"feedbackText\" + \" id = '\" + inputs[i].id + \"fbb' \" + \"></div>\";\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(inputs[i].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (inputs[i].getAttribute(\"data-is-correct\") == \"false\" && !inputs[i].checked) {\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").textContent = \"\";\n\t\t\t}\n\n\t\t}\n\n\t\t//inputs with data minvalue are actually numeric\n\t\telse if ((inputs[i].type.toLowerCase() == \"text\") && (!inputs[i].getAttribute(\"data-minvalue\"))) {\n\t\t\tquestionType = \"text\";\n\n\t\t\t// is answer case sensitive (boolean attribute, it's value is irrelevant, only attributes existence)\n\t\t\tvar isCaseSensitive = inputs[i].getAttribute(\"data-case-sensitive\") != null;\n\n\t\t\tif (inputs[i].getAttribute(\"data-correct-data\")) {\n\t\t\t\tvar userAnswer = inputs[i].value;\n\t\t\t\tvar rightAnswer = getQuizSubelementById(modal, inputs[i].id + \"f\");\n\t\t\t\tvar answerList = inputs[i].getAttribute(\"data-correct-data\").split(';');\n\t\t\t\tvar correctAnswer = false;\n\t\t\t\tfor (var k = 0; k < answerList.length; k++) {\n\t\t\t\t\t// case INsensitive anser\n\t\t\t\t\tif (!isCaseSensitive && userAnswer.trim().toLowerCase() === (answerList[k].trim().toLowerCase())) {\n\t\t\t\t\t\tcorrectAnswer = true;\n\t\t\t\t\t}\n\t\t\t\t\t// case sensitive answer\n\t\t\t\t\telse if (userAnswer.trim() === (answerList[k].trim())) {\n\t\t\t\t\t\tcorrectAnswer = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (correctAnswer) {\n\t\t\t\t\t// add correct class to .dos-eval class\n\t\t\t\t\t$(`#${inputs[i].id}`).closest('.dos-eval')[0].classList.add('correct');\n\n\t\t\t\t\tif (getQuizSubelementById(modal, inputs[i].id + \"feedbackText\")) {\n\t\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"feedbackText\").classList.add('question-element-hide');\n\t\t\t\t\t}\n\t\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t\t} else {\n\t\t\t\t\t// add incorrect class to .dos-eval class\n\t\t\t\t\t$(`#${inputs[i].id}`).closest('.dos-eval')[0].classList.add('incorrect');\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, inputs[i].id + \"feedbackText\").textContent;\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tisCompletelyCorrect = false;\n\t\t\t\t\tinputId = inputs[i].id;\n\t\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + inputs[i].id + \"feedbackText\" + \" id = '\" + inputs[i].id + \"fbb' \" + \"></div>\";\n\n\t\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\t\tdocument.getElementById(inputs[i].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t} else if (inputs[i].type.toLowerCase() == \"number\") {\n\t\t\tquestionType = \"number\";\n\t\t\tvar userAnswer = inputs[i].value;\n\n\t\t\tvar minValue = inputs[i].getAttribute(\"data-minValue\");\n\t\t\tvar maxValue = inputs[i].getAttribute(\"data-maxValue\");\n\t\t\tvar correctAnswer = false;\n\t\t\tvar userNumber = userAnswer;\n\t\t\tif (!isNaN(userNumber)) {\n\t\t\t\tif (parseFloat(userNumber) >= parseFloat(minValue) && parseFloat(userNumber) <= parseFloat(maxValue)) {\n\t\t\t\t\tcorrectAnswer = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (correctAnswer) {\n\t\t\t\t// add correct class to .dos-eval class\n\t\t\t\t$(`#${inputs[i].id}`).closest('.dos-eval')[0].classList.add('correct');\n\n\t\t\t\tif (getQuizSubelementById(modal, inputs[i].id + \"feedbackText\")) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"feedbackText\").classList.add('question-element-hide');\n\t\t\t\t}\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\n\t\t\t} else {\n\t\t\t\t// add incorrect class to .dos-eval class\n\t\t\t\t$(`#${inputs[i].id}`).closest('.dos-eval')[0].classList.add('incorrect');\n\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, inputs[i].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\n\t\t\t\tinputId = inputs[i].id;\n\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + inputs[i].id + \"feedbackText\" + \" id = '\" + inputs[i].id + \"fbb' \" + \"></div>\";\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(inputs[i].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ((inputs[i].type.toLowerCase() == \"text\") && (inputs[i].getAttribute(\"data-minvalue\"))) {\n\t\t\t//this is a numeric input of type float, so we can use the library to restrict to num input and determine if , and . are valid decimal separators\n\t\t\tquestionType = \"numeric\";\n\t\t\tvar userAnswer = inputs[i].value;\n\t\t\tvar minValue = inputs[i].getAttribute(\"data-minValue\");\n\t\t\tvar maxValue = inputs[i].getAttribute(\"data-maxValue\");\n\t\t\tvar correctAnswer = false;\n\n\t\t\t//convert ',' to '.' so it can enter into parsefloat\n\t\t\tvar userNumber = userAnswer.replace(\",\", \".\");\n\t\t\tuserNumber = parseFloat(userNumber);\n\n\t\t\tif (!isNaN(userNumber)) {\n\t\t\t\tif (parseFloat(userNumber) >= parseFloat(minValue) && parseFloat(userNumber) <= parseFloat(maxValue)) {\n\t\t\t\t\tcorrectAnswer = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (correctAnswer) {\n\t\t\t\t// add correct class to .dos-eval class\n\t\t\t\t$(`#${inputs[i].id}`).closest('.dos-eval')[0].classList.add('correct');\n\n\t\t\t\tif (getQuizSubelementById(modal, inputs[i].id + \"feedbackText\")) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"feedbackText\").classList.add('question-element-hide');\n\t\t\t\t}\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\n\t\t\t\tif (isCompletelyCorrect) {\n\t\t\t\t\tif (winAudio) {\n\t\t\t\t\t\twinAudio.play();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// add incorrect class to .dos-eval class\n\t\t\t\t$(`#${inputs[i].id}`).closest('.dos-eval')[0].classList.add('incorrect');\n\n\t\t\t\tif (loseAudio) {\n\t\t\t\t\tloseAudio.play();\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, inputs[i].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\n\t\t\t\tinputId = inputs[i].id;\n\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, inputs[i].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + inputs[i].id + \"feedbackText\" + \" id = '\" + inputs[i].id + \"fbb' \" + \"></div>\";\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(inputs[i].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst falseAnswers = Array.from(inputs).filter(function (el) {\n\t\tconst enteredValue = el.value;\n\t\tconst dataIsCorrect = el.getAttribute('data-is-correct');\n\t\tconst minValue = el.getAttribute('data-minValue');\n\t\tconst maxValue = el.getAttribute('data-maxValue');\n\t\tconst correctData = el.getAttribute('data-correct-data');\n\t\tlet correctDatas = [];\n\n\t\tif (correctData && correctData.includes(';')) {\n\t\t\tvar temp = correctData.split(';');\n\t\t\tfor (let i = 0; i < temp.length; i++) {\n\t\t\t\tcorrectDatas.push(temp[i].trim());\n\t\t\t}\n\t\t}\n\n\t\tvar isFalse = minValue && maxValue ? enteredValue < minValue || enteredValue > maxValue : correctData && correctData.includes(';') ? (!correctDatas.includes(enteredValue)) : (enteredValue != correctData || correctData === 'false');\n\n\t\treturn isFalse;\n\t});\n\n\tif (questionType == \"text\") {\n\t\tif (isCompletelyCorrect) {\n\t\t\tif (winAudio) {\n\t\t\t\twinAudio.play();\n\t\t\t}\n\t\t} else {\n\t\t\tif (loseAudio) {\n\t\t\t\tloseAudio.play();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (questionType == \"checkbox\") {\n\t\tif (isCompletelyCorrect) {\n\t\t\tif (winAudio) {\n\t\t\t\twinAudio.play();\n\t\t\t}\n\n\t\t\t//Give score in future\n\t\t\ttry {\n\t\t\t\tdocument.getElementById(\"checkbox-comment-\" + realSrcId).innerHTML = \"\";\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t} else {\n\t\t\tif (loseAudio) {\n\t\t\t\tloseAudio.play();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tdocument.getElementById(\"checkbox-comment-\" + realSrcId).innerHTML = \"Zadatak nije u potpunosti točno riješen. Pokušajte ponovo!\";\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t}\n\t} else {\n\t\t//What happens when question type is not checkbox, currently nothing is needed\n\t}\n\n\tvar options = modal.getElementsByTagName(\"option\");\n\tvar processedOptionsForQuestion = [];\n\tvar correctSelections = [];\n\tvar unduplicatedOptions = [];\n\tfor (let i = 0; i < options.length; i++) {\n\t\tif (!unduplicatedOptions.includes(options[i].text)) {\n\t\t\tunduplicatedOptions.push(options[i].text);\n\t\t}\n\t}\n\tfor (var j = 0; j < options.length; j++) {\n\t\tquestionElement = getParentQuestionTopElement(options[j]);\n\t\tquestionOutcomeId = fillOutcomeInfoData(questionElement);\n\t\tif (!(processedOptionsForQuestion.indexOf(options[j].id.split(\"o\")[0]) > -1)) {\n\t\t\tprocessedOptionsForQuestion.push(options[j].id.split(\"o\")[0]);\n\t\t\tfillQuestionData(questionElement, questionOutcomeId);\n\t\t}\n\n\t\tif (options[j].selected == true) {\n\t\t\tif (options[j].value == options[j].id.split(\"a\")[1].split(\"o\")[0]) {\n\t\t\t\t// add correct class to .dos-eval class\n\t\t\t\t$(`#${options[j].id}`).closest('.dos-eval')[0].classList.add('correct');\n\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, options[j].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\t\t\t\tinputId = options[j].id;\n\n\t\t\t\tif (!correctSelections.includes(inputId)) {\n\t\t\t\t\tcorrectSelections.push(inputId);\n\t\t\t\t}\n\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, options[j].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + options[j].id + \"feedbackText\" + \" id = '\" + options[j].id + \"fbb' \" + \"></div>\";\n\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(options[j].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// add incorrect class to .dos-eval class\n\t\t\t\t$(`#${options[j].id}`).closest('.dos-eval')[0].classList.add('incorrect');\n\n\t\t\t\ttry {\n\t\t\t\t\tfeedbackText = getQuizSubelementById(modal, options[j].id + \"feedbackText\").textContent;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tfeedbackText = \"\";\n\t\t\t\t}\n\t\t\t\tinputId = options[j].id;\n\n\t\t\t\t//13 is minimmum with html comment it seems\n\t\t\t\tif (decideToShowFeedback(feedbackText)) {\n\t\t\t\t\tgetQuizSubelementById(modal, options[j].id + \"f\").innerHTML += \"<div class = 'feedback-image' feedbackid=\" + options[j].id + \"feedbackText\" + \" id = '\" + options[j].id + \"fbb' \" + \"></div>\";\n\n\t\t\t\t\t//if event listener directly calls function with arguments, it will execute on start, so it has to call an anonymous function that passes the args\n\t\t\t\t\tdocument.getElementById(options[j].id + \"fbb\").addEventListener(\"click\", function () {\n\t\t\t\t\t\tgiveFeedback(inputId, feedbackText, this.id);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (unduplicatedOptions.length > 0) {\n\t\tif ((unduplicatedOptions.length === correctSelections.length) || (processedOptionsForQuestion.length == correctSelections.length)) {\n\t\t\tif (winAudio) {\n\t\t\t\twinAudio.play();\n\t\t\t}\n\t\t} else {\n\t\t\tif (loseAudio) {\n\t\t\t\tloseAudio.play();\n\t\t\t}\n\t\t}\n\t}\n\n\tcurrentQuiz = document.getElementById(realSrcId);\n\n\tif ($(currentQuiz).find(\".connect-pairs\").length || $(currentQuiz).attr('data-question-type') === questionTypes.dragOrderElements) {\n\n\t\tquestionOutcomeId = fillOutcomeInfoData(currentQuiz);\n\n\t\tvar groupTable = $(currentQuiz).find(\"table.dos-part-question__content\");\n\n\t\tgroupTable.find(\"tr\").each(function () {\n\t\t\tfillQuestionData(currentQuiz, questionOutcomeId);\n\t\t\t//table pairs must come in two\n\t\t\ttablePairs = $(this).find(\"td\");\n\t\t\tif ($(currentQuiz).attr('data-question-type') === questionTypes.dragOrderElements) { // task type is dragOrderElements\n\t\t\t\tif (tablePairs[0].getAttribute(\"data-correct-pair\") == tablePairs[1].getAttribute(\"data-correct-pair\")) {\n\t\t\t\t\t$($(tablePairs)[1]).addClass(\"success\");\n\t\t\t\t\taddQuestionCorrectAnswerCount(currentQuiz);\n\t\t\t\t} else {\n\t\t\t\t\t$($(tablePairs)[1]).addClass(\"danger\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (tablePairs[0].getAttribute(\"data-correct-pair\") == tablePairs[1].getAttribute(\"data-correct-pair\")) {\n\t\t\t\t\t$(tablePairs).addClass(\"success\");\n\t\t\t\t\taddQuestionCorrectAnswerCount(currentQuiz);\n\t\t\t\t} else {\n\t\t\t\t\t$(tablePairs).addClass(\"danger\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst falseAnswers = groupTable.find('td').toArray().filter(function (el) {\n\t\t\treturn el.classList.contains('danger');\n\t\t});\n\n\t\tif (falseAnswers.length > 0) {\n\t\t\tif (loseAudio) {\n\t\t\t\tloseAudio.play();\n\t\t\t}\n\t\t} else {\n\t\t\tif (winAudio) {\n\t\t\t\twinAudio.play();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif (currentQuiz.getAttribute('data-question-type') === questionTypes.dragSortElements) {\n\t\tvar groupElements = modal.getElementsByClassName(\"draggable\");\n\t\tvar groupElementsSuccess = [];\n\t\tvar groupElementsDanger = [];\n\t\tfor (var j = 0; j < groupElements.length; j++) {\n\t\t\tquestionElement = getParentQuestionTopElement(groupElements[j]);\n\t\t\tquestionOutcomeId = fillOutcomeInfoData(questionElement);\n\t\t\tfillQuestionData(questionElement, questionOutcomeId);\n\t\t\tvar correctAnswerField = groupElements[j].getElementsByClassName(\"f\")[0];\n\t\t\tif (groupElements[j].getAttribute(\"data-dragged-group-value\") == groupElements[j].getAttribute(\"data-group\")) {\n\t\t\t\tgroupElementsSuccess.push(groupElements[j]);\n\t\t\t\tgroupElements[j].classList.add(\"success\");\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t} else {\n\t\t\t\tgroupElementsDanger.push(groupElements[j]);\n\t\t\t\tgroupElements[j].classList.add(\"danger\");\n\t\t\t}\n\t\t}\n\t}\n\n\tvar sortableOrderedElements = modal.getElementsByClassName(\"sortableOrderedElements\");\n\tvar incorrectSortables = [];\n\tfor (var j = 0; j < sortableOrderedElements.length; j++) {\n\n\t\tquestionElement = getParentQuestionTopElement(sortableOrderedElements[j]);\n\t\tquestionOutcomeId = fillOutcomeInfoData(questionElement);\n\n\t\tif ($('#' + sortableOrderedElements[j].id.replace('sortableOrder2', 'sortableOrder1')).children('li').length) {\n\t\t\tfor (var i = 0; i < $('#' + sortableOrderedElements[j].id.replace('sortableOrder2', 'sortableOrder1')).children('li').length; i++) {\n\t\t\t\tfillQuestionData(questionElement, questionOutcomeId);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i = 0; i < $('#' + sortableOrderedElements[j].id).children('li').length; i++) {\n\t\t\t\tfillQuestionData(questionElement, questionOutcomeId);\n\t\t\t}\n\t\t}\n\n\t\tvar orderedElements = sortableOrderedElements[j].getElementsByTagName(\"li\");\n\t\tfor (var k = 0; k < orderedElements.length; k++) {\n\t\t\tif (k == orderedElements[k].getAttribute(\"id\").split('a')[1]) {\n\t\t\t\torderedElements[k].classList.add('success');\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t} else {\n\t\t\t\torderedElements[k].classList.add('danger');\n\t\t\t\tincorrectSortables.push(orderedElements[k]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (incorrectSortables.length > 0 && sortableOrderedElements.length > 0 && loseAudio && winAudio) {\n\t\tif (loseAudio) {\n\t\t\tloseAudio.play();\n\t\t}\n\t} else {\n\t\tif (sortableOrderedElements.length > 0) {\n\t\t\tif (winAudio) {\n\t\t\t\twinAudio.play();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (currentQuiz.getAttribute('data-question-type') === questionTypes.dragOnPicture) {\n\t\tvar draggableElementsSuccess = [];\n\t\tvar draggableElementsDanger = [];\n\t\tvar draggableElements = modal.getElementsByClassName(\"draggable-restricted\");\n\t\tisCompletelyCorrect = true;\n\n\t\tfor (var j = 0; j < draggableElements.length; j++) {\n\t\t\tquestionElement = getParentQuestionTopElement(draggableElements[j]);\n\t\t\tquestionOutcomeId = fillOutcomeInfoData(questionElement);\n\t\t\tfillQuestionData(questionElement, questionOutcomeId);\n\n\t\t\tvar pictureDropzone = $(draggableElements[j]).closest(\".question-body\").find(\".picture-dropzone-quiz\");\n\t\t\t//check that draggable element is on right location\n\t\t\tif (isGoodLocation(draggableElements[j].getAttribute(\"data-percentage-x\"), draggableElements[j].getAttribute(\"data-percentage-y\"),\n\t\t\t\tdraggableElements[j].getAttribute(\"data-quiz-percentage-x\"), draggableElements[j].getAttribute(\"data-quiz-percentage-y\"), pictureDropzone.width(), pictureDropzone.height())) {\n\t\t\t\tdraggableElements[j].classList.add('success');\n\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t\tdraggableElementsSuccess.push(draggableElements[j]);\n\t\t\t} else {\n\t\t\t\tdraggableElements[j].classList.add('danger');\n\t\t\t\tisCompletelyCorrect = false;\n\t\t\t\tdraggableElementsDanger.push(draggableElements[j]);\n\t\t\t}\n\n\t\t}\n\n\t\tif (isCompletelyCorrect) {\n\t\t\tif (winAudio) {\n\t\t\t\twinAudio.play();\n\t\t\t}\n\t\t} else if (!isCompletelyCorrect) {\n\t\t\tif (loseAudio) {\n\t\t\t\tloseAudio.play();\n\t\t\t}\n\t\t}\n\t}\n\n\n\tif (currentQuiz.getAttribute('data-question-type') === questionTypes.dragElements) {\n\t\tvar draggableElementsSuccess = [];\n\t\tvar draggableElementsDanger = [];\n\t\tvar draggableElements = modal.getElementsByClassName(\"draggable\");\n\t\tisCompletelyCorrect = true;\n\n\t\tfor (var j = 0; j < draggableElements.length; j++) {\n\t\t\tquestionElement = getParentQuestionTopElement(draggableElements[j]);\n\t\t\tquestionOutcomeId = fillOutcomeInfoData(questionElement);\n\t\t\tfillQuestionData(questionElement, questionOutcomeId);\n\n\t\t\tif (draggableElements[j].getAttribute(\"data-dragged-group-value\") === draggableElements[j].getAttribute(\"data-group\")) {\n\t\t\t\tdraggableElementsSuccess.push(draggableElements[j]);\n\t\t\t\tdraggableElements[j].classList.add(\"success\");\n\t\t\t\taddQuestionCorrectAnswerCount(questionElement);\n\t\t\t} else {\n\t\t\t\tisCompletelyCorrect = false;\n\t\t\t\tdraggableElementsDanger.push(draggableElements[j]);\n\t\t\t\tdraggableElements[j].classList.add(\"danger\");\n\t\t\t}\n\n\t\t}\n\n\t\tif (isCompletelyCorrect) {\n\t\t\tif (winAudio) {\n\t\t\t\twinAudio.play();\n\t\t\t}\n\t\t} else if (!isCompletelyCorrect) {\n\t\t\tif (loseAudio) {\n\t\t\t\tloseAudio.play();\n\t\t\t}\n\t\t}\n\t}\n\n\t// REPL start\n\t//if (!inputs.length) { // there are no inputs in REPL\n\tif ($(\"#\" + realSrcId).attr(\"data-question-type\") === \"REPL zadatak\") {\n\t\tCode.check(realSrcId);\n\t}\n\t// REPL end\n}\n\nfunction decideToShowFeedback(feedbackText) {\n\tfeedbackTextWithoutWhitespace = feedbackText.replace(/\\s/g, \"\");\n\tif (feedbackTextWithoutWhitespace.length > 1) {\n\t\treturn true;\n\t} else return false;\n}\n\n/**\n * Drag counter based z-index - this allows stacking draggables in the order of their last movement instead of DOM order.\n *\n * If draggable elements have an additional z-index applied eg. during dragging, that z-index should be high enough so\n * counter based z-index does not become greater that, otherwise, additional z-index will not be sufficient to stack\n * over other siblings.\n */\nvar DragCounter = {\n\t// element moves/drags counter\n\tdragCounter: 0,\n\n\tonDragStart: function (target) {\n\t\t// increase drag counter on move\n\t\t++this.dragCounter;\n\t\t// clear drag counter inline z-index\n\t\ttarget.style.zIndex = '';\n\t},\n\tonDragEnd: function (target) {\n\t\t// get target's base z-index\n\t\tvar currentZIndex = parseInt(window.getComputedStyle(target).zIndex || 0);\n\t\t// set new z-index\n\t\tif ($(target).closest(\"div[id*='uestionId']\")[0].getAttribute('data-question-type') !== questionTypes.dragSortElements) {\n\t\t\ttarget.style.zIndex = currentZIndex + this.dragCounter;\n\t\t} else {\n\t\t\ttarget.style.zIndex = 1;\n\t\t}\n\n\t}\n};\n\n\nvar Code = (function () {\n\n\tconst LINT_OPTIONS = {\n\t\t\"globals\": {\n\t\t\t\"alert\": true,\n\t\t\t\"print\": true\n\t\t},\n\t\t\"undef\": true,\n\t\t\"unused\": true\n\t};\n\n\tconst AnswerTypes = {\n\t\tIGNORED: 'ignored',\n\t\tSTATIC: 'static',\n\t\tEVALUATED: 'evaluated'\n\t};\n\n\tvar ReplType = {\n\t\tJAVASCRIPT: 'javascript',\n\t\tPYTHON: 'python',\n\t\tBLOCKLY: 'blockly',\n\t};\n\n\tvar InputType = {\n\t\tSTRING: 'string',\n\t\tFLOAT: 'float',\n\t\tINTEGER: 'integer',\n\t\tBOOLEAN: 'boolean',\n\t};\n\n\tconst Styles = {\n\t\tCODE_OUTPUT: 'overflow: auto; height: 300px; border: 1px solid; background-color: white; font-family: monospace; padding: 0.5em; font-size: 0.8em;',\n\t\tCODE_OUTPUT_MARKER: '',\n\t\tCODE_OUTPUT_TEXT: '',\n\t\tCODE_OUTPUT_INPUT: 'display:flex; ',\n\t\tCODE_OUTPUT_INPUT_LABEL: '',\n\t\tCODE_OUTPUT_INPUT_CONTROL: 'flex: 1; outline: none; border: 0 none; text-align: left;',\n\t};\n\n\tvar tasks = {};\n\n\t// private methods\n\t// ---------- utils\n\n\t/** Ensure that empty or invalid values always ends up as an array. */\n\tfunction ensureArrContent(content) {\n\t\tif (content == null) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// handle bug in empty arr representation\n\t\tif (content === 'null') {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!Array.isArray(content)) {\n\t\t\treturn [content];\n\t\t}\n\n\t\treturn content;\n\t}\n\n\t/** Check if value is \"web empty\" ie. undefined, value or an empty string. */\n\tfunction isEmptyValue(value) {\n\t\treturn value == null || value === '';\n\t}\n\n\n\t// ---------- tasks\n\n\t/** Find and return task by id. Or fail. If that's what you want. */\n\tfunction getTask(id, fail = true) {\n\t\tif (tasks[id] == null && fail) {\n\t\t\tthrow 'Unknown task ' + id;\n\t\t}\n\n\t\treturn tasks[id];\n\t}\n\n\n\t// ---------- code\n\n\tfunction getTaskCode(task) {\n\t\tif (task.params.replType === ReplType.JAVASCRIPT) {\n\t\t\treturn task.editor.getValue();\n\t\t} else if (task.params.replType === ReplType.PYTHON) {\n\t\t\treturn task.editor.getValue();\n\t\t} else if (task.params.replType === ReplType.BLOCKLY) {\n\t\t\treturn Blockly.JavaScript.workspaceToCode(task.editor);\n\t\t} else {\n\t\t\tthrow 'Unknown repl type ' + task.params.replType + ' on task ' + task.params.id;\n\t\t}\n\t}\n\n\tfunction getTaskReferenceCode(task) {\n\t\tconst referenceCode = createTaskReferenceCode(task);\n\n\t\treturn [\n\t\t\t...referenceCode.inputs,\n\t\t\t...referenceCode.code,\n\t\t].join('\\n');\n\t}\n\n\tfunction createInitialTaskCode(task) {\n\t\tif (task.params.replType === ReplType.JAVASCRIPT) {\n\t\t\treturn {\n\t\t\t\tcode: task.params.code,\n\t\t\t\tinputs: createJsInputsCode(task.params.inputs)\n\t\t\t};\n\t\t} else if (task.params.replType === ReplType.PYTHON) {\n\t\t\treturn {\n\t\t\t\tcode: task.params.code,\n\t\t\t\tinputs: createPythonInputsCode(task.params.inputs)\n\t\t\t};\n\t\t} else if (task.params.replType === ReplType.BLOCKLY) {\n\t\t\treturn {\n\t\t\t\tcode: [],\n\t\t\t\tinputs: [],\n\t\t\t};\n\t\t} else {\n\t\t\tthrow 'Error creating editor. Unknown REPL type: ' + task.params.replType;\n\t\t}\n\t}\n\n\tfunction createTaskReferenceCode(task) {\n\t\tif (task.params.replType === ReplType.JAVASCRIPT) {\n\t\t\treturn {\n\t\t\t\tcode: task.params.answerText,\n\t\t\t\tinputs: createJsInputsCode(task.params.inputs),\n\t\t\t};\n\t\t} else if (task.params.replType === ReplType.PYTHON) {\n\t\t\treturn {\n\t\t\t\tcode: task.params.answerText,\n\t\t\t\tinputs: createPythonInputsCode(task.params.inputs),\n\t\t\t};\n\t\t} else if (task.params.replType === ReplType.BLOCKLY) {\n\t\t\treturn {\n\t\t\t\tcode: [],\n\t\t\t\tinputs: [],\n\t\t\t};\n\t\t} else {\n\t\t\tthrow 'Error creating editor. Unknown REPL type: ' + task.params.replType;\n\t\t}\n\t}\n\n\tfunction findOutputElement(id) {\n\t\tvar outputSelector = \"#output-\" + id;\n\t\treturn $(outputSelector);\n\t}\n\n\tfunction findCheckButtonElement(id) {\n\t\tvar selector = \"#check\" + id;\n\t\treturn $(selector);\n\t}\n\n\tfunction clearOutput(id) {\n\t\tfindOutputElement(id).text(\"\");\n\t\tclearResultStatus(id);\n\t}\n\n\tfunction appendToOutput(id, content) {\n\t\tconst $outputEl = findOutputElement(id);\n\t\t$outputEl.append(content);\n\t\t$outputEl.scrollTop($outputEl.prop('scrollHeight'));\n\t}\n\n\tfunction setResultStatus(id, resultClass) {\n\t\tclearResultStatus(id);\n\t\tfindOutputElement(id).addClass(resultClass);\n\t}\n\n\tfunction getTaskResult(id) {\n\t\tvar $outputEl = findOutputElement(id);\n\n\t\treturn $outputEl.children('.code-output-text').map(function () {\n\t\t\treturn $(this).text();\n\t\t})\n\t\t\t.get();\n\t}\n\n\tfunction clearResultStatus(id) {\n\t\tfindOutputElement(id).removeClass('success danger');\n\t}\n\n\tfunction writeReplConsoleOutputMarker(id, value) {\n\t\tappendToOutput(id, $(`<div class=\"code-output-marker\" style=\"${Styles.CODE_OUTPUT_MARKER}\">${value}</div>`));\n\t}\n\n\tfunction writeReplConsoleText(id, value) {\n\t\tappendToOutput(id, $(`<div class=\"code-output-text\" style=\"${Styles.CODE_OUTPUT_TEXT}\">${value}</div>`));\n\t}\n\n\tfunction writeReplConsoleInput(id, label, valueCallback) {\n\t\tconst inputContainerEl = $(`<div class=\"code-output-input\" style=\"${Styles.CODE_OUTPUT_INPUT}\" />`);\n\t\tconst labelEl = $(`<span class=\"code-output-inputLabel\" style=\"${Styles.CODE_OUTPUT_INPUT_LABEL}\" />`).text(label);\n\t\tconst inputEl = $(`<input>`, {\n\t\t\ttype: \"text\",\n\t\t\t\"class\": \"code-output-inputControl\",\n\t\t\tstyle: Styles.CODE_OUTPUT_INPUT_CONTROL,\n\t\t\ton: {\n\t\t\t\tkeypress: function (event) {\n\t\t\t\t\t// on enter disable further input and return value\n\t\t\t\t\tif (event.keyCode == 13) {\n\t\t\t\t\t\t$(this)\n\t\t\t\t\t\t\t.attr(\"disabled\", \"disabled\")\n\t\t\t\t\t\t\t.blur();\n\t\t\t\t\t\tvalueCallback(this.value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinputContainerEl.append(labelEl);\n\t\tinputContainerEl.append(inputEl);\n\t\tappendToOutput(id, inputContainerEl);\n\n\t\tinputEl.focus();\n\t}\n\n\n\t/** Do some necessary UI adjustments depending on task's configuration. */\n\tfunction configureUi(task) {\n\t\t__tmp__replaceOutputEl(task.params.id);\n\t\tconfigureCheckButton(task);\n\t}\n\n\t/** Configure check button according to answer type. */\n\tfunction configureCheckButton(task) {\n\t\tconst id = task.params.id;\n\t\tconst $checkButtonEl = findCheckButtonElement(id);\n\n\t\t// IGNORED - hide check button\n\t\tif (task.params.answerType === AnswerTypes.IGNORED) {\n\t\t\t$checkButtonEl.hide();\n\t\t}\n\t}\n\n\t/** Tmp solution that replaces current HTML output TEXTAREA el with DIV. If this new \"Code\" implementation proves OK, this should be done in HTML itself instead. */\n\tfunction __tmp__replaceOutputEl(id) {\n\t\tconst $outputEl = findOutputElement(id);\n\t\t$outputEl.replaceWith($('<div />', {\n\t\t\tid: $outputEl.attr('id'),\n\t\t\tclass: $outputEl.attr('class'),\n\t\t\tstyle: Styles.CODE_OUTPUT,\n\t\t}));\n\t}\n\n\n\t// ---------- Interpreters\n\n\t/** Output writer that passes output to given callback fn. */\n\tfunction createCallbackOutputWriter(callback) {\n\t\treturn {\n\t\t\twrite: (...params) => {\n\t\t\t\tcallback(params.join(''));\n\t\t\t}\n\t\t};\n\t};\n\n\t/** Output writer that buffers output into given buffer (array). */\n\tfunction createBufferedOutputWriter(buffer) {\n\t\treturn {\n\t\t\twrite: (...args) => {\n\t\t\t\tbuffer.push(args.join(''));\n\t\t\t}\n\t\t};\n\t};\n\n\t/** Input reader that reads from default browser prompt. */\n\tfunction createPromptInputReader() {\n\t\treturn {\n\t\t\tread: (label) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst value = prompt(label);\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\n\t/** Input reader that reads from default browser prompt. */\n\tfunction createInlineInputReader(taskId) {\n\t\treturn {\n\t\t\tread: (label) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twriteReplConsoleInput(taskId, label, (value) => {\n\t\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\t/** Input reader that takes another input reader and records it's every input into a queue. */\n\tfunction createQueueLookupRecorderInputReader(inputReader, inputRecordQueue) {\n\t\treturn {\n\t\t\tread: (text) => {\n\t\t\t\treturn inputReader.read(text)\n\t\t\t\t\t.then((value) => {\n\t\t\t\t\t\tinputRecordQueue.push(value);\n\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\t/** Input reader that takes another input reader and records it's every input into a lookup map. */\n\tfunction createMapLookupRecorderInputReader(inputReader, inputRecordMap) {\n\t\treturn {\n\t\t\tread: (text) => {\n\t\t\t\treturn inputReader.read(text)\n\t\t\t\t\t.then((value) => {\n\t\t\t\t\t\tinputRecordMap[text] = value;\n\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Input reader that uses prepared/recorded lookup queue to return input.\n\t * This reader allows inputs to be accessed/read in the same order they were recorded in.\n\t */\n\tfunction createQueueLookupInputReader(lookupQueue) {\n\t\treturn {\n\t\t\tread: (text) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst value = lookupQueue.shift();\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Input reader that uses prepared/recorded lookup map to return input.\n\t * This reader allows inputs to be accessed/read by the label they were recorded with. This has a limitation that you must have unique input labels for all inputs.\n\t */\n\tfunction createMapLookupInputReader(lookupMap) {\n\t\treturn {\n\t\t\tread: (text) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst value = lookupMap[text];\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Possible options:\n\t *  - outputWriter  - output writer impl object\n\t *  - inputReader - input collector impl object\n\t */\n\tfunction runInterpreter(replType, code, options) {\n\t\tif (replType === ReplType.JAVASCRIPT) {\n\t\t\treturn runJsInterpreter(code, options);\n\t\t} else if (replType === ReplType.PYTHON) {\n\t\t\treturn runPythonInterpreter(code, options);\n\t\t} else if (replType === ReplType.BLOCKLY) {\n\t\t\treturn runJsInterpreter(code);\n\t\t} else {\n\t\t\tthrow 'Unknown REPL type: ' + replType;\n\t\t}\n\t}\n\n\t// -- Python interpreter\n\n\tfunction runPythonInterpreter(code, options) {\n\t\tlet expectTrailingNewline = false;\n\t\t// output writer function wrapper\n\t\tvar outputWriterFn = function (...params) {\n\t\t\tif (expectTrailingNewline && params.length === 1 && params.slice(0, 1).shift() === '\\n') {\n\t\t\t\t// ignore python's trailing newline\n\t\t\t} else {\n\t\t\t\tif (options && options.outputWriter) {\n\t\t\t\t\toptions.outputWriter.write(...params);\n\t\t\t\t}\n\t\t\t}\n\t\t\texpectTrailingNewline = !expectTrailingNewline;\n\t\t};\n\n\t\t// input reader function wrapper\n\t\tvar inputReaderFn = function (text) {\n\t\t\tif (options && options.inputReader) {\n\t\t\t\treturn options.inputReader.read(text);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t};\n\n\t\tSk.configure({\n\t\t\toutput: outputWriterFn,\n\t\t\tinputfun: inputReaderFn,\n\t\t\tinputfunTakesPrompt: true,\n\t\t\tread: (x) => {\n\t\t\t\tif (Sk.builtinFiles === undefined || Sk.builtinFiles[\"files\"][x] === undefined) {\n\t\t\t\t\tthrow \"File not found: '\" + x + \"'\";\n\t\t\t\t}\n\t\t\t\treturn Sk.builtinFiles[\"files\"][x];\n\t\t\t}\n\t\t});\n\n\t\treturn Sk.misceval.asyncToPromise(function () {\n\t\t\treturn Sk.importMainWithBody(\"<stdin>\", false, code, true);\n\t\t});\n\t}\n\n\n\t// -- JS interpreter\n\n\t/**\n\t * JS interpreter\n\t * Dos: https://neil.fraser.name/software/JS-Interpreter/docs.html\n\t */\n\tfunction runJsInterpreter(code, options) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tlet interval;\n\t\t\ttry {\n\t\t\t\tvar interpreter = new Interpreter(code, jsInterpreterInitFn(options));\n\t\t\t\tinterpreter.run();\n\n\t\t\t\t// loop until there are no more steps to performe, then exit\n\t\t\t\tinterval = setInterval(() => {\n\t\t\t\t\tif (!interpreter.step()) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tinterval = null;\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tif (interval != null) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tinterval = null;\n\t\t\t\t}\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction jsInterpreterInitFn(options) {\n\t\treturn (interpreter, scope) => {\n\t\t\t// type coversion utils\n\t\t\tfunction parseBoolFn(strValue) {\n\t\t\t\tif (strValue == null || strValue.trim().length === 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\treturn /^true$/i.test(strValue.trim());\n\t\t\t\t}\n\t\t\t}\n\t\t\tinterpreter.setProperty(scope, \"parseBool\", interpreter.createNativeFunction(parseBoolFn));\n\n\t\t\t// output writer function wrapper\n\t\t\tvar outputWriterFn = function (...params) {\n\t\t\t\tif (options && options.outputWriter) {\n\t\t\t\t\toptions.outputWriter.write(...params);\n\t\t\t\t}\n\n\t\t\t\treturn interpreter.UNDEFINED;\n\t\t\t};\n\t\t\tinterpreter.setProperty(scope, \"print\", interpreter.createNativeFunction(outputWriterFn));\n\t\t\tinterpreter.setProperty(scope, \"alert\", interpreter.createNativeFunction(outputWriterFn));\n\n\t\t\t// input reader function wrapper\n\t\t\tvar inputReaderFn = function (text, callback) {\n\t\t\t\tif (options && options.inputReader) {\n\t\t\t\t\toptions.inputReader.read(text)\n\t\t\t\t\t\t.then((value) => {\n\t\t\t\t\t\t\tcallback(value);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t};\n\t\t\tinterpreter.setProperty(scope, \"input\", interpreter.createAsyncFunction(inputReaderFn));\n\t\t\tinterpreter.setProperty(scope, \"prompt\", interpreter.createAsyncFunction(inputReaderFn));\n\t\t};\n\t}\n\n\tfunction createJsInputsCode(inputs) {\n\t\t// wrap cmd in type converter, if there is type and it's not string (stirn is defualt)\n\t\tfunction typeWrapper(inputType, cmd) {\n\t\t\tif (inputType != null && inputType !== InputType.STRING) {\n\t\t\t\tif (inputType === InputType.BOOLEAN) {\n\t\t\t\t\treturn `parseBool(${cmd})`;\n\t\t\t\t} else if (inputType === InputType.FLOAT) {\n\t\t\t\t\treturn `parseFloat(${cmd})`;\n\t\t\t\t} else if (inputType === InputType.INTEGER) {\n\t\t\t\t\treturn `parseInt(${cmd})`;\n\t\t\t\t}\n\t\t\t\t// no typing, return original value\n\t\t\t} else {\n\t\t\t\treturn cmd;\n\t\t\t}\n\t\t}\n\n\t\treturn (inputs || []).map((input) => {\n\t\t\treturn `var ${input.name} = ${typeWrapper(input.type, 'prompt(\"' + input.label + '\")')};`;\n\t\t});\n\t}\n\n\tfunction createPythonInputsCode(inputs) {\n\t\t// wrap cmd in type converter, if there is type and it's not string (stirn is defualt)\n\t\tfunction typeWrapper(inputType, cmd) {\n\t\t\tif (inputType != null && inputType !== InputType.STRING) {\n\t\t\t\tif (inputType === InputType.BOOLEAN) {\n\t\t\t\t\treturn `bool(${cmd})`;\n\t\t\t\t} else if (inputType === InputType.FLOAT) {\n\t\t\t\t\treturn `float(${cmd})`;\n\t\t\t\t} else if (inputType === InputType.INTEGER) {\n\t\t\t\t\treturn `int(${cmd})`;\n\t\t\t\t}\n\t\t\t\t// no typing, return original value\n\t\t\t} else {\n\t\t\t\treturn cmd;\n\t\t\t}\n\t\t}\n\n\t\treturn (inputs || []).map((input) => {\n\t\t\treturn `${input.name} = ${typeWrapper(input.type, 'input(\"' + input.label + '\")')}`;\n\t\t});\n\t}\n\n\t// ---------- Editor\n\n\tfunction createEditor(task) {\n\t\tif (task.params.replType === ReplType.JAVASCRIPT) {\n\t\t\tconst taskCode = createInitialTaskCode(task);\n\t\t\treturn createCodeEditor(\n\t\t\t\ttask.params.id,\n\t\t\t\ttask.params.replType,\n\t\t\t\ttaskCode.code,\n\t\t\t\ttaskCode.inputs,\n\t\t\t);\n\t\t} else if (task.params.replType === ReplType.PYTHON) {\n\t\t\tconst taskCode = createInitialTaskCode(task);\n\t\t\treturn createCodeEditor(\n\t\t\t\ttask.params.id,\n\t\t\t\ttask.params.replType,\n\t\t\t\ttaskCode.code,\n\t\t\t\ttaskCode.inputs,\n\t\t\t);\n\t\t} else if (task.params.replType === ReplType.BLOCKLY) {\n\t\t\treturn createBlocklyEditor(\n\t\t\t\ttask.params.id,\n\t\t\t\ttask.params.toolbox,\n\t\t\t\ttask.params.workspace\n\t\t\t);\n\t\t} else {\n\t\t\tthrow 'Error creating editor. Unknown REPL type: ' + task.params.replType;\n\t\t}\n\t}\n\n\tfunction resetEditor(id) {\n\t\tconst task = getTask(id);\n\n\t\tif (task.params.replType === ReplType.JAVASCRIPT) {\n\t\t\tconst taskCode = createInitialTaskCode(task);\n\t\t\treturn resetCodeEditor(\n\t\t\t\ttask.editor,\n\t\t\t\ttaskCode.code,\n\t\t\t\ttaskCode.inputs,\n\t\t\t);\n\t\t} else if (task.params.replType === ReplType.PYTHON) {\n\t\t\tconst taskCode = createInitialTaskCode(task);\n\t\t\treturn resetCodeEditor(\n\t\t\t\ttask.editor,\n\t\t\t\ttaskCode.code,\n\t\t\t\ttaskCode.inputs,\n\t\t\t);\n\t\t} else if (task.params.replType === ReplType.BLOCKLY) {\n\t\t\treturn resetBlocklyEditor(task.editor, task.params.toolbox, task.params.workspace);\n\t\t} else {\n\t\t\tthrow 'Error creating editor. Unknown REPL type: ' + task.params.replType;\n\t\t}\n\t}\n\n\t// -- Code editor\n\n\tfunction createCodeEditor(id, type, code, inputs) {\n\t\tvar options = {\n\t\t\tlineNumbers: true,\n\t\t\tmode: type,\n\t\t};\n\t\tif (options.mode === ReplType.JAVASCRIPT) {\n\t\t\toptions.gutters = [\"CodeMirror-lint-markers\"];\n\t\t\t//options.lint = true;\n\t\t\toptions.lint = LINT_OPTIONS;\n\t\t}\n\n\t\tconst editor = CodeMirror(document.getElementById(\"editor-\" + id), options);\n\n\t\tresetCodeEditor(editor, code, inputs);\n\n\t\treturn editor;\n\t};\n\n\tfunction resetCodeEditor(editor, code, inputs) {\n\t\t// rest editor\n\t\teditor.setValue('');\n\t\teditor.clearHistory();\n\n\t\t// set new value\n\t\teditor.setValue([\n\t\t\t// add generated inputs before initial code\n\t\t\t...inputs,\n\t\t\t// add initial code\n\t\t\t...code\n\t\t].join('\\n')\n\t\t);\n\n\t\t// disable editing of generated inputs lines\n\t\tif (inputs && inputs.length > 0) {\n\t\t\teditor.markText({ line: 0, ch: 0 }, { line: inputs.length, ch: 0 }, { readOnly: true, css: 'opacity: 0.4;' });\n\t\t}\n\t}\n\n\n\t// -- Blockly editor\n\n\t// TODO: solve hardcoded media path for Blockly\n\tfunction createBlocklyEditor(id, toolbox, workspace) {\n\t\treturn Blockly.inject(\"editor-\" + id, {\n\t\t\tmedia: \"../explain/static/preview/1.1/js/vendor/blockly/media/\",\n\t\t\tsounds: false,\n\t\t\ttoolbox: toolbox,\n\t\t\ttrashcan: true\n\t\t});\n\t};\n\n\tfunction resetBlocklyEditor(editor, toolbox, workspace) {\n\t\teditor.setValue('');\n\t\t// TODO: check resetting blockly editor\n\t}\n\n\n\n\t// ---------- public functions\n\n\tvar init = function (questionId, replType, inputs, answerText, answerType, replCode, blocklyToolbox, blocklyWorkspace) {\n\t\ttry {\n\t\t\tvar task = {};\n\t\t\ttask.params = {};\n\t\t\ttask.params.id = questionId;\n\t\t\ttask.params.replType = replType;\n\t\t\ttask.params.inputs = ensureArrContent(inputs); // there is a bug that renders old questions as \"null\" (string)\n\t\t\ttask.params.answerText = ensureArrContent(answerText);\n\t\t\ttask.params.answerType = isEmptyValue(answerType) ? AnswerTypes.STATIC : answerType; // old questions don't have answer type\n\t\t\ttask.params.code = ensureArrContent(replCode);\n\t\t\ttask.params.toolbox = blocklyToolbox;\n\t\t\ttask.params.workspace = blocklyWorkspace;\n\n\t\t\ttask.editor = createEditor(task);\n\n\t\t\tconfigureUi(task);\n\n\t\t\ttasks[task.params.id] = task;\n\t\t} catch (err) {\n\t\t\tconsole.error('Error initializing task ' + questionId, err);\n\t\t}\n\t};\n\n\tvar run = function (id) {\n\t\ttry {\n\t\t\tlet task = getTask(id);\n\n\t\t\tlet code = getTaskCode(task);\n\n\t\t\ttask.lastRecordedInputLookup = [];\n\t\t\tPromise.resolve(true)\n\t\t\t\t.then(() => {\n\t\t\t\t\tclearOutput(task.params.id);\n\t\t\t\t\twriteReplConsoleOutputMarker(task.params.id, \"[pocetak programa]\");\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\treturn runInterpreter(task.params.replType, code, {\n\t\t\t\t\t\toutputWriter: createCallbackOutputWriter((text) => writeReplConsoleText(task.params.id, text)),\n\t\t\t\t\t\tinputReader: createQueueLookupRecorderInputReader(createInlineInputReader(task.params.id), task.lastRecordedInputLookup),\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\twriteReplConsoleText(task.params.id, err.toString());\n\t\t\t\t\tconsole.error('Error running code on task ' + task.params.id, err);\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\twriteReplConsoleOutputMarker(task.params.id, \"[kraj programa]\");\n\t\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.error('Error running task ' + id, err);\n\t\t}\n\t};\n\n\tvar check = function (id) {\n\t\ttry {\n\t\t\tvar task = getTask(id);\n\n\t\t\tclearResultStatus(id);\n\n\t\t\tvar resultOutput = getTaskResult(task.params.id);\n\t\t\tlet referenceCode = getTaskReferenceCode(task);\n\n\t\t\tconst referenceOutputBuffer = [];\n\t\t\t// evaluated - output comapraed against evaluated reference code\n\t\t\tif (task.params.answerType === AnswerTypes.EVALUATED) {\n\t\t\t\trunInterpreter(task.params.replType, referenceCode, {\n\t\t\t\t\toutputWriter: createBufferedOutputWriter(referenceOutputBuffer),\n\t\t\t\t\tinputReader: createQueueLookupInputReader(task.lastRecordedInputLookup),\n\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tcompareResults(resultOutput, referenceOutputBuffer);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tconsole.error('Error running reference code on task ' + task.params.id, err);\n\t\t\t\t\t});\n\t\t\t\t// static - output compared with static answer\n\t\t\t} else if (task.params.answerType === AnswerTypes.STATIC) {\n\t\t\t\tcompareResults(resultOutput, task.params.answerText);\n\t\t\t\t// ignored - no check, answer is ignored\n\t\t\t} else if (task.params.answerType === AnswerTypes.IGNORED) {\n\t\t\t\t// ignore answer check - this probably shouldn't have even been called\n\t\t\t\treturn;\n\t\t\t\t// unknown answer type\n\t\t\t} else {\n\t\t\t\tconsole.error(`Unknown answer type \"${task.params.answerType}\" in task \"${task.params.id}\"`);\n\t\t\t}\n\n\t\t\tfunction compareResults(resultOutput, referenceOutput) {\n\t\t\t\tvar answerCorrect;\n\t\t\t\tif (referenceOutput.length === resultOutput.length) { // number of lines must match\n\t\t\t\t\tanswerCorrect = true;\n\t\t\t\t\tfor (var i = 0; answerCorrect && i < resultOutput.length; i++) { // each line must be exact as the ones provided by answer\n\t\t\t\t\t\tanswerCorrect = resultOutput[i] === referenceOutput[i];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tanswerCorrect = false;\n\t\t\t\t}\n\t\t\t\tif (answerCorrect) {\n\t\t\t\t\tsetResultStatus(task.params.id, \"success\");\n\t\t\t\t\tif (winAudio) {\n\t\t\t\t\t\twinAudio.play();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetResultStatus(task.params.id, \"danger\");\n\t\t\t\t\tif (loseAudio) {\n\t\t\t\t\t\tloseAudio.play();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Error checking task ' + id, err);\n\t\t}\n\t};\n\n\tvar reset = function (id) {\n\t\ttry {\n\t\t\tvar task = getTask(id, false);\n\t\t\tif (task == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresetEditor(task.params.id);\n\t\t\tclearOutput(task.params.id);\n\t\t} catch (err) {\n\t\t\tconsole.error('Error resetting task ' + id, err);\n\t\t}\n\t};\n\n\t// exposing public methods\n\n\treturn {\n\t\tinit: init,\n\t\trun: run,\n\t\tcheck: check,\n\t\treset: reset,\n\t\ttasks: tasks // temp while develop\n\t};\n})();\n\nconst resetAllQuestionsOnPage = () => {\n\tconst questions = $(\"div[id*='questionId'][data-question-type]\").toArray();\n\tquestions.forEach((question) => {\n\t\tresetQuizQuestion(question.id, true);\n\t});\n};\n\n\n\nconst quizInit = () => {\n\tconst questions = $(\"div[id*='questionId'][data-question-type]\").toArray();\n\tquestions.forEach((question) => {\n\t\tinitDragPairsElements(question.id);\n\t});\n\n\n\tresetAllQuestionsOnPage();\n};\n\nquizInit();\n\n$(document).ready(function () {\n\tinitKeyboardDragDrop();\n\tinitAdditionalKeyboardNav();\n\n\t$('input:checkbox').on('click', function (event) {\n\t\tif (!document.activeElement.checked || (event.target !== $(document.activeElement)[0])) {\n\t\t\t$(document.activeElement)[0].blur();\n\t\t}\n\t});\n\n\tif (window.MathJax) {\n\t\tMathJax.Hub.Queue(function () {\n\t\t\t$.each($('input.length-tiny').not(\"input[id*=_q]\"), function (index, value) {\n\t\t\t\tvalue.tabIndex = '-1';\n\t\t\t});\n\t\t});\n\t}\n\n\t$('.checkQuizButton').on('click', function (event) {\n\t\tlet taskId = $(event.target).closest(\"div[id*='uestionId'][data-question-type]\").attr('id');\n\t\tif ($(`#${taskId}`).find('.can-drop')[0] && $(`#${taskId}`).find('.can-drop')[0].classList.contains('can-drop')) {\n\t\t\t$(`#${taskId}`).find('.can-drop')[0].classList.remove('can-drop');\n\t\t}\n\n\t\tif ($(`#${taskId}`).find('.can-drop-style')[0] && $(`#${taskId}`).find('.can-drop-style')[0].classList.contains('can-drop-style')) {\n\t\t\t$(`#${taskId}`).find('.can-drop-style')[0].classList.remove('can-drop-style');\n\t\t}\n\t});\n\n\t$('.resetQuizButton').on('keypress', function (event) {\n\t\tif (event.keyCode === 32 || event.keyCode === 13) {\n\t\t\tresetQuizQuestion($(event.target).closest(\"div[id*='uestionId'][data-question-type]\").attr('id'));\n\n\t\t\tif ($(event.target).closest(\"div[id*='uestionId'][data-question-type]\").attr('data-question-type') !== 'Da/Ne') {\n\t\t\t\t$(`#${$(event.target).closest(\"div[id*='uestionId'][data-question-type]\").attr('id')}`).find(\":tabbable\")[0].focus();\n\t\t\t}\n\t\t}\n\t});\n\n\t$(function () {\n\t\t$('*[draggable!=true]', '.slick-track').unbind('dragstart');\n\t\t$(\".draggable-element\").draggable();\n\t});\n});\n"

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0)(__webpack_require__(12))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = "$(document).ready(function() {\n  const keyboardContainers = document.querySelectorAll('.keyboard_container');\n\n  if (keyboardContainers && keyboardContainers.length > 0) {\n    for (var i = 0; i < keyboardContainers.length; i++) {\n      const keysId = keyboardContainers[i].getAttribute('data-key-var');\n      const parentId = keysId.split('keys_');\n      bindKeyboard(keyboardContainers[i], keysId, parentId[1]);\n    }\n  }\n})\n\nfunction bindKeyboard(keyboardContainer, keysId, parentId) {\n  const keys = window[keysId] || eval(keysId);\n  const parent = document.getElementById(parentId);\n  const toggleButton = keyboardContainer.querySelector('.toggle_button');\n  const inputs = parent.getElementsByTagName('input');\n\n  const controlsContainer = parent.getElementsByClassName('dos-part-question__controls')[0];\n  const contentContainer = parent.getElementsByClassName('dos-part-question__content')[0];\n\n  let keyboard = keyboardContainer.querySelector('.keyboard');\n\n  if (!keyboard) {\n    const keyb = document.createElement('div');\n    keyb.classList.add('keyboard');\n\n    keyboardContainer.appendChild(keyb);\n\n    keyboard = keyb;\n  }\n\n  //controlsContainer.parentElement.insertBefore(keyboardContainer, controlsContainer);\n  $(keyboardContainer).insertAfter(contentContainer)\n\n  for (var i = 0; i < inputs.length; i++) {\n    addEvent(inputs[i], 'focus', function () {\n      currentInput = this;\n      if (!keyboardContainer.classList.contains('open')) {\n        keyboardContainer.classList.add('open');\n      }\n    });\n  }\n  insertAllButtons(keyboard);\n\n  function insertAllButtons(keyboard) {\n    const closeButton = document.createElement('button');\n    const closeButtonText = document.createTextNode('X');\n\n    closeButton.classList.add('close_keyboard');\n    closeButton.append(closeButtonText);\n    keyboard.append(closeButton);\n    addEvent(closeButton, 'click', function () {\n      keyboardContainer.classList.remove('open');\n    });\n\n    for (let i = 0; i < keys.length; i++) {\n      const button = document.createElement('button');\n      const buttonText = document.createTextNode(keys[i].code);\n      const attribute = document.createAttribute('name');\n\n      attribute.value = keys[i].name;\n      button.value = keys[i].code;\n      button.setAttributeNode(attribute);\n      button.appendChild(buttonText);\n\n      addEvent(button, 'click', inputChar);\n\n      keyboard.appendChild(button);\n    }\n  }\n}\n\nfunction inputChar() {\n  if (currentInput) {\n    currentInput.focus();\n    currentInput.value += this.value;\n  }\n}\n\nfunction addEvent(element, eventType, func) {\n  const onEventType = eventType.replace(/^\\w/, function (char) {\n    return char.toUpperCase();\n  });\n\n  if (element.addEventListener) {\n    element.addEventListener(eventType, func);\n  } else if (element.attachEvent) {\n    element.attachEvent('on' + onEventType, func);\n  } else {\n    element['on' + onEventType] = func;\n  }\n}"

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0)(__webpack_require__(15))

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = "const games = document.querySelectorAll(\".memory\");\n\nfor (var i = 0; i < games.length; i++) {\n  memoryGame(games[i]);\n}\n\nfunction memoryGame(game) {\n  const cards = game.querySelectorAll(\".card-holder\");\n  const pointsToWin = cards.length / 2;\n  const tooltip = game.querySelector(\".memory-tooltip\");\n\n  let moveCounter = 0;\n  let points = 0;\n  let hasFlippedCard = false;\n  let lockBoard = false;\n  let firstCard, secondCard;\n\n  tooltip.innerText = \"Broj poteza: \" + moveCounter;\n\n  for (var i = 0; i < cards.length; i++) {\n    const randomPos = Math.floor(Math.random() * cards.length);\n    cards[i].style.order = randomPos;\n    addEvent(cards[i]);\n  }\n\n  function addEvent(element) {\n    if (element.addEventListener) {\n      element.addEventListener(\"click\", flipCard);\n    } else if (element.attachEvent) {\n      element.attachEvent(\"onClick\", flipCard);\n    } else {\n      element[\"onClick\"] = flipCard;\n    }\n  }\n\n  function flipCard() {\n    if (lockBoard || this === firstCard) {\n      return;\n    }\n\n    this.classList.add(\"flip\");\n\n    let cover = this.querySelector(\".cover\");\n    let card = this.querySelector(\".card\");\n\n    setTimeout(function() {\n      cover.classList.add(\"hidden\");\n      card.classList.add(\"visible\");\n    }, 150);\n\n    if (!hasFlippedCard) {\n      hasFlippedCard = true;\n      firstCard = this;\n\n      return;\n    }\n\n    secondCard = this;\n    setTimeout(function() {\n      checkForMatch();\n    }, 300);\n  }\n\n  function checkForMatch() {\n    let isMatch = firstCard.dataset.framework === secondCard.dataset.framework;\n\n    moveCounter++;\n    tooltip.innerText = \"Broj poteza: \" + moveCounter;\n\n    if (isMatch) {\n      points++;\n      disableCards();\n\n      if (points >= pointsToWin) {\n        endGame();\n      }\n    } else {\n      unflipCards();\n    }\n  }\n\n  function disableCards() {\n    firstCard.removeEventListener(\"click\", flipCard);\n    secondCard.removeEventListener(\"click\", flipCard);\n\n    addTooltipToCard(firstCard);\n    addTooltipToCard(secondCard);\n\n    resetSelection();\n  }\n\n  function addTooltipToCard(card) {\n    const tooltipText = document.createTextNode(`${points}`);\n    const tooltip = document.createElement('span');\n    tooltip.appendChild(tooltipText);\n    tooltip.classList.add('pair-tooltip');\n\n    card.style.transitionDuration = '0s'; // remove transition duration to remove unwanted animations\n    card.classList.remove('flip');\n\n    card.querySelector('.card').style.transitionDuration = '0s'; // remove transition duration to remove unwanted animations\n    card.querySelector('.card').style.visibility = 'unset';\n    card.querySelector('.card').style.transform = 'unset';\n    card.appendChild(tooltip);\n  }\n\n  function unflipCards() {\n    lockBoard = true;\n\n    setTimeout(function() {\n      firstCard.classList.remove(\"flip\");\n      secondCard.classList.remove(\"flip\");\n\n      return hideCards();\n    }, 1500);\n\n    function hideCards() {\n      setTimeout(function() {\n        firstCard.querySelector(\".card\").classList.remove(\"visible\");\n        firstCard.querySelector(\".cover\").classList.remove(\"hidden\");\n\n        secondCard.querySelector(\".card\").classList.remove(\"visible\");\n        secondCard.querySelector(\".cover\").classList.remove(\"hidden\");\n\n        resetSelection();\n      }, 150);\n    }\n  }\n\n  function resetSelection() {\n    firstCard = secondCard = null;\n    lockBoard = hasFlippedCard = false;\n  }\n\n  function endGame() {\n    tooltip.innerText = \"Bravo! Ukupan broj poteza: \" + moveCounter;\n  }\n}\n"

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0)(__webpack_require__(18))

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = "\nconst ORIGIN_DEFAULT = '*';\n\n/**\n * Content window communication client. Communicates with content object using window.postMessage and window.addEventListener API.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n */\nconst ContentWindowCommClient = function ContentCommClient(element, options) {\n  // ---- options\n  let debug;\n  let origin;\n\n  init();\n\n\n  // ----- public API\n\n  function init() {\n    if (!element) {\n      throw \"Element is empty.\";\n    }\n  \n    if (!element.postMessage) {\n      throw \"Element does not suport sending messages.\";\n    }\n  \n    if (!element.addEventListener || !element.removeEventListener) {\n      throw \"Element does not suport listening to messages.\";\n    }\n\n    debug = readOption(options != null ? options.debug : undefined, false)\n    origin = readOption(options != null ? options.origin : undefined, ORIGIN_DEFAULT)\n  }\n\n  this.sendMessage = (message) => {\n    this.logMessage(`sending`, message)\n    element.postMessage(message, origin)\n  }\n\n  this.addMessageListener = (callback) => {\n    const eventHandler = (event) => {\n      const message = event.data;\n\n      // react only on messages that have \"type\" property to ignore other 3rd party communication\n      if (message.type != null) {\n        this.logMessage('received', message);\n        callback(message)\n      }\n    }\n\n    element.addEventListener('message', eventHandler);\n\n    // return event unsubscriber\n    return () => {\n      element.removeEventListener('message', eventHandler);\n    }; \n  }\n\n  this.logMessage = (text, content) => {\n    if (debug) {\n      const optionsStr = ` (${JSON.stringify({ origin })})`;\n      console.info(`[ContentComm] ${text}${optionsStr}: ${JSON.stringify(content)}`)\n    }\n  }\n\n  function readOption(value, defaultValue) {\n    return value != null ? value : defaultValue;\n  }\n}\n\n/** Common messages */\nconst ContentCommMessageTypes = {\n  // ----- test messages\n  COMMON_DOS_PING: 'COMMON_DOS_PING',\n  COMMON_CONTENT_PONG: 'COMMON_CONTENT_PONG',\n}\n\n\n// ----- exports\n\nwindow['ContentWindowCommClient'] = ContentWindowCommClient;\n"

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0)(__webpack_require__(20))

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = "\nconst IvrContentCommMessageTypes = {\n  DOS_SCROLL_CONTENT_OBJECT_VISIBLE: 'DOS_SCROLL_CONTENT_OBJECT_VISIBLE',\n}\n\n/**\n * Generic IVR content communication client. Communicates with given IVR and listens to it's messages.\n * \n * @param {*} elementId ID of IVR frame element\n * @param {*} options communications options (see \"Communication options\")\n * \n * Communication options\n *  - debug {boolean} enable debug mode (eg. print debug messages on console)\n *  - origin {string} used as origin parameter when posting window messages (window.postMessage)\n */\nconst IvrContentCommClient = function IvrContentClient(elementId, options) {\n  // have communicator and content element been initialized\n  let initialized = false;\n  let initializedPromise;\n  let commClient;\n\n  const iframeElement = $(`#${elementId}`);\n  if (iframeElement.length === 0) {\n    throw `IVR element ${elementId} not found`;\n  }\n  const iframeEl = iframeElement.get().shift();\n  \n\n  // init client\n  init();\n\n  // ----- public API\n\n  /** Returns true if communicator and content element have been initialized and false otherwise. */\n  this.isInitialized = () => {\n    return this.isInitialized;\n  }\n\n  /** Returns promise which is resolved when comm has been initialized. */\n  this.onInitialized = () => {\n    return initializedPromise;\n  }\n\n  /** Send message to IVR. */\n  this.sendMessage = (message) => {\n    commClient.sendMessage(message);\n  }\n\n  /** Listen to IVR messages. Function returns unsubscribe function. */\n  this.addMessageListener = (listener) => {\n    return commClient.addMessageListener(listener);\n  }\n\n\n  // ----- private\n\n  /** Initialize everything */\n  function init() {\n    let resolveRef, rejectRef;\n    initializedPromise = new Promise((resolve, reject) => {\n      // allow external promise handling\n      resolveRef = resolve\n      rejectRef = reject;\n    });\n\n    var contentWindow = iframeEl.contentWindow;\n    commClient = new ContentWindowCommClient(contentWindow, options);\n    contentWindow.addEventListener('load', () => {\n      initialized = true;\n      resolveRef();\n    })  \n  }\n}\n\n/**\n * Scroll visible IVR content communication client. Handles IVR's \"DOS_SCROLL_CONTENT_OBJECT_VISIBLE\".\n * Uses IvrContentCommClient underhood so see there for more details.\n * \n * Additional options:\n *  - topOffset {number} number of pixels to which to scroll body\n */\nconst ScrollVisibleIvrContentCommClient = function IvrContentClient(elementId, options) {\n  // options\n  let topOffset;\n\n  let ivrCommClient;\n\n  // init client\n  init();\n\n  // ----- public API\n\n  /** Returns true if communicator and content element have been initialized and false otherwise. */\n  this.isInitialized = () => {\n    return ivrCommClient && ivrCommClient.isInitialized();\n  }\n\n  /** */\n  this.onInitialized = () => {\n    return ivrCommClient.onInitialized();\n  }\n\n\n  // ----- private\n\n  /** Initialize everything */\n  function init() {\n    topOffset = readOption(options && options.topOffset, 100);\n\n    ivrCommClient = new IvrContentCommClient(elementId, options);\n    ivrCommClient.addMessageListener(handleMessage)\n  }\n\n  function handleMessage(message) {\n    if (IvrContentCommMessageTypes.DOS_SCROLL_CONTENT_OBJECT_VISIBLE === message.type) {\n      handleScrollVisible();\n    }\n  }\n\n  function handleScrollVisible() {\n    $('html, body').animate({\n      scrollTop: $(`#${elementId}`).offset().top - topOffset // Scroll to this location.\n    });\n  }\n\n  function readOption(value, defaultValue) {\n    return value != null ? value : defaultValue;\n  }\n}\n\n\n// ----- exports\n\nwindow['IvrContentCommClient'] = IvrContentCommClient;\nwindow['ScrollVisibleIvrContentCommClient'] = ScrollVisibleIvrContentCommClient;\n"

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,